<plominodatabase id="iol_praticaweb">
  <design>
    <resource id="config_pagopa" title="Configurazione pagopa e metodi di calcolo (ANDORA)" type="Script (Python)"><![CDATA[## Script (Python) "config_pagopa"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,azione=''
##title=Configurazione pagopa e metodi di calcolo (ANDORA)
##
from Products.CMFPlomino.PlominoUtils import decimal
# Configurazione pagopa e metodi di calcolo

dz=dict(

    nomeEnte="Unione Dei Comuni Valmerula e Montarosio",
    
    secure="PagoPa-GW!#",

    aliasPagamentoImmediato = "SUE-UCvalmerula",
    aliasPagamentoDiretto = "SUE-UCvalmerula",

    urlPagamentoImmediato = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/rest/pagamentomultiplo",
    urlPagamentoDiretto = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/rest/pagamentodiretto",
    urlPagamento = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/pagamento-multiplo-immediato",
    urlServlet = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/servlet",    
    urlInfoPagamento = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/rest/riconciliazione/iuv",
    
    
    urlOk = context.portal_url() + '/iol-PagoPaEsito',
    
    urlPost = "http://pagopa-sp.iolweb.it/iol-PagoPaEsito",
    
    esito_pagamento = ['BOLLETTINO','OK','KO','ATTESA_RT','ANNULLATO','ERRORE'],

    metodo_pagamento = ['BOLLETTINO','ONLINE'],
    
    codice_pagamento = ['Diritti di segreteria - Edilizia, Urbanistica, SUAP|DIRITT', 
                        'Proventi derivanti da concessioni edilizie e da sanzioni previste dalla disciplina urbanistica|CONCSANZ',
                        'Urbanistica - Oneri derivanti da L.R. 16/2008 art. 38 comma 6bis|URBA', 
                        'Proventi derivanti da concessioni o autorizzazioni in sanatoria ai sensi D.L. 269/2003|SANAT'],


    #Dove far confluire i pagamenti multipli del bollettino
    codice_pagamento_diretto = 'DIRITT',
    
    #Se impostato PRESENTAZIONE occorre inserire almento un importo per inviare
    importi_tipo = {
        'cil': {'BOLLI': 0, 'SEGRETERIA': 51.65, 'PRESENTAZIONE': 1},
        'cila': {'BOLLI': 0, 'SEGRETERIA': 51.65, 'PRESENTAZIONE': 1},
        'scia': {'BOLLI': 0, 'SEGRETERIA': -1, 'PRESENTAZIONE': 1},
        'scia2': {'BOLLI': 0, 'SEGRETERIA': -1, 'PRESENTAZIONE': 1},
        'pdc': {'BOLLI': 16, 'SEGRETERIA': -1, 'PRESENTAZIONE': 1},
        'paesaggistica-ordinaria': {'BOLLI': 16, 'SEGRETERIA': -1, 'PRESENTAZIONE': 1},
        'paesaggistica-accertamento': {'BOLLI': 16, 'SEGRETERIA': -1, 'PRESENTAZIONE': 1},
        'paesaggistica-semplificata': {'BOLLI': 16, 'SEGRETERIA': -1, 'PRESENTAZIONE': 1},
        'aua': {'BOLLI': 0, 'SEGRETERIA': 51.65, 'PRESENTAZIONE': 1},
        'sca': {'BOLLI': 0, 'SEGRETERIA': 51.65, 'PRESENTAZIONE': 1},
        'art22': {'BOLLI': 0, 'SEGRETERIA': 51.65, 'PRESENTAZIONE': 1},
        'art48': {'BOLLI': 0, 'SEGRETERIA': 51.65, 'PRESENTAZIONE': 1},
        'lr25': {'BOLLI': 0, 'SEGRETERIA': 0, 'PRESENTAZIONE': 1},        
        'iniziolavori': {'BOLLI': 0, 'SEGRETERIA': 0, 'PRESENTAZIONE': 1},
        'finelavori': {'BOLLI': 0, 'SEGRETERIA': 0, 'PRESENTAZIONE': 1},
        'integrazione': {'BOLLI': 0, 'SEGRETERIA': 0},
        'idrogeologico-aut': {'BOLLI': 16, 'SEGRETERIA': 150, 'PRESENTAZIONE': 1},
        'idrogeologico-scia': {'BOLLI': 0, 'SEGRETERIA': 50, 'PRESENTAZIONE': 1},
        'dsi': {'BOLLI':32, 'SEGRETERIA': 0, 'PRESENTAZIONE': 1},
        'deposito-impianti': {'BOLLI': 0, 'SEGRETERIA': 51.65, 'PRESENTAZIONE': 1},

    }

)

#se non passo nulla ritorno il diz di configurazione
if not doc:
    if script.getId() in context.REQUEST.get('URL'):
        context.REQUEST.RESPONSE.redirect(context.getParentDatabase().absolute_url())        
    else:
        return dz

if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
importi_tipo = dz.get('importi_tipo')

#importo bolli
def getImportoBolli(index):   
    tipo_app = doc.getItem('iol_tipo_app')
    conf = importi_tipo.get(tipo_app)
    if not conf:
        return 0
    
    importo = conf.get('BOLLI')
    tipoPag = 'BOLLIED'        
    causale = 'Bollo per presentazione'
    scadenza = 'Presentazione'
    azione = 'presentazione'
    
    #contestuale paesaggistica: raddoppio l'importo
    if doc.getItem('procedimento_autorizzazione_paesaggistica_opt') in ['1','2']:
        conf = importi_tipo.get('paesaggistica-ordinaria')
        if conf:
            importo = importo + conf.get('BOLLI')
            causale = causale + ' + paesagg. contesuale'
        
    #contestuale autorizzazione vincolo idrogeologico
    if doc.getItem('vincolo_idrogeologico_opt') in ['3','5']:
        conf = importi_tipo.get('idrogeologico-aut')
        if conf:
            importo = importo + conf.get('BOLLI')
            causale = causale + ' + aut.idro. contestuale'
             
    #contestuale denuncia sismica integrata
    if (doc.getItem('interventi_strutturali_opt') == '3' and doc.getItem('documentazione_dsi_opt')=='1') or doc.getItem('interventi_strutturali_opt') == '4':        
        conf = importi_tipo.get('dsi')
        if conf:
            importo = importo + conf.get('BOLLI')
            causale = causale + ' + dsi contestuale'    
            
    if not importo:
        return 0   
    
    return ['%02d'%index,tipoPag,causale,decimal(importo),scadenza,azione]
        
    
#calcolo diritti segreteria in base alla volumetria
def getImportoSegreteria(index):
    tipo_app = doc.getItem('iol_tipo_app')
    conf = importi_tipo.get(tipo_app)
    volume = 0
    if not conf:
        return 0
    
    if conf.get('SEGRETERIA')==-1:
        #calcolo
        volume = doc.getItem('immobile_volumetria_intervento', 0)
        if volume <= 30:
            importo = 51.65
        elif volume <=100:
            importo = 103.29
        elif volume <= 300:
            importo = 154.94
        elif volume <= 500:
            importo = 258.23
        elif volume <= 1000:
            importo = 413.17
        else:
            importo = 516.46
    else:
        importo = conf.get('SEGRETERIA')
        
    tipoPag = 'SEGRETERIA'        
    causale = 'Diritti di segreteria'
    if volume:
        causale = causale + ' volumetria %s' %volume
    scadenza = 'Presentazione'
    azione = 'presentazione'
               
    #contestuale paesaggistica: raddoppio l'importo
    if doc.getItem('procedimento_autorizzazione_paesaggistica_opt') in ['1','2']:
        importo = importo*2
        causale = causale + ' + paesagg. contesuale'
        
    #contestuale autorizzazione vincolo idrogeologico
    if doc.getItem('vincolo_idrogeologico_opt') in ['3','5']:
        conf = importi_tipo.get('idrogeologico-aut')
        if conf:
            importo = importo + conf.get('SEGRETERIA')
            causale = causale + ' + aut.idro. contestuale'
            
            
    if not importo:
        return 0

    return ['%02d'%index,tipoPag,causale,decimal(importo),scadenza,azione]


# bollo e diritti per presentazione SUE
def setImportiPresentazioneSUE():
    data = []
    maxIndex = 0
    
    importo =  getImportoBolli(maxIndex)
    if importo:
        maxIndex = maxIndex + 1
        data.append(importo)
        
    importo = getImportoSegreteria(maxIndex+1)
    if importo:
        maxIndex = maxIndex + 1
        data.append(importo) 
        
               
    doc.setItem('elenco_importi_index',maxIndex)
    doc.setItem('elenco_importi_dg',data)
    return data
    
    
# bollo e diritti per presentazione SUE
def setImportiRilascioSUE():
    data = doc.getItem('elenco_importi_dg', []) 
    scadenza = 'Rilascio titolo'
    for d in data:
        if d[4] == scadenza:
            #gia' inserito
            return
        
    maxIndex = doc.getItem('elenco_importi_index',0) + 1
    causale = 'Bollo per rilascio titolo'
    tipoPag = 'BOLLI'
    data.append(['%02d'%maxIndex,tipoPag,causale,decimal(importo_bollo),scadenza,azione])
    
    doc.setItem('elenco_importi_index',maxIndex)
    doc.setItem('elenco_importi_dg',data)
    return data
    
###NON SETTA NULLA    
return 


if azione == 'presentazione':    
    return setImportiPresentazioneSUE()

elif azione == 'alla_firma':
    return setImportiRilascioSUE()
]]></resource>
  </design>
</plominodatabase>
