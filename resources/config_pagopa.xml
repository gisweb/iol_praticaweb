<plominodatabase id="iol_praticaweb">
  <design>
    <resource id="config_pagopa" title="Configurazione pagopa e metodi di calcolo (SPEZIA)" type="Script (Python)"><![CDATA[## Script (Python) "config_pagopa"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,azione=''
##title=Configurazione pagopa e metodi di calcolo (SPEZIA)
##
from Products.CMFPlomino.PlominoUtils import decimal
# Configurazione pagopa e metodi di calcolo

importo_bollo = 16

dz=dict(

    nomeEnte="Comune della Spezia",
    
    secure="PagoPa-GW!#",

    aliasPagamentoImmediato = "SUE-Claspezia-M1",
    aliasPagamentoDiretto = "SUE-Claspezia-M1",

    urlPagamentoImmediato = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/rest/pagamentomultiplo",
    urlPagamentoDiretto = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/rest/pagamentodiretto",
    urlPagamento = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/pagamento-multiplo-immediato",
    urlServlet = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/servlet",    
    urlInfoPagamento = "https://nodopagamenti.regione.liguria.it/portale/nodopagamenti/rest/riconciliazione/iuv",
    
    
    urlOk = context.portal_url() + '/iol-PagoPaEsito',
    
    urlPost = "http://pagopa-sp.iolweb.it/iol-PagoPaEsito",
    
    esito_pagamento = ['BOLLETTINO','OK','KO','ATTESA_RT','ANNULLATO','ERRORE'],

    metodo_pagamento = ['BOLLETTINO','ONLINE'],
    codice_pagamento = ['Deposito Cauzionale|CAUZ', 
                        'Diritti Istruttoria Ambiente|ISTR', 
                        'Diritti Istruttoria Toponomastica|TOPONOM', 
                        'Diritti di Segreteria|SEGRETERIA', 
                        'Marche da Bollo|BOLLIED', 
                        'Modulistica|CART', 
                        'Oneri Condono|COND', 
                        'Oneri Terzo Condono|COND3', 
                        'Oneri o Sanzioni|URBA', 
                        'Proventi Rilascio Targhette|CIVICI', 
                        'Quota 10% Urbanizzazione|URBA10', 
                        'Quota 7% Urbanizzazione|URBA07', 
                        'Rimborsi e Recuperi Diversi|RIMB', 
                        'Sanzione Danno Ambientale|SANZ', 
                        'Svincolo Obblighi Convenzionali|SVINC'],
    

    #Dove far confluire i pagamenti multipli del bollettino
    codice_pagamento_diretto = 'SEGRETERIA',
    
    importo_bollo = importo_bollo,
    
    aggiungi_importo = True,

    
)

#se non passo nulla ritorno il diz di configurazione
if not doc:
    if script.getId() in context.REQUEST.get('URL'):
        context.REQUEST.RESPONSE.redirect(context.getParentDatabase().absolute_url())        
    else:
        return dz

#calcolo diritti segreteria in base alla volumetria
def getImportoVolumetria(index):
    
    volume = doc.getItem('immobile_volumetria', 0)
    if volume <= 30:
        importo = 51.65
    elif volume <=100:
        importo = 103.29
    elif volume <= 300:
        importo = 154.94
    elif volume <= 500:
        importo = 258.23
    elif volume <= 1000:
        importo = 413.17
    else:
        importo = 516.46
        
    tipoPag = 'SEGRETERIA'        
    causale = "Diritti segreteria volumetria %s" %volume
    scadenza = 'Presentazione'
    azione = ''
    return ['%02d'%index,tipoPag,causale,decimal(importo),scadenza,azione]
        

# bollo e diritti per presentazione SUE
def setImportiPresentazioneSUE():
    data = doc.getItem('elenco_importi_dg', []) 
    scadenza = 'Presentazione'
    for d in data:
        if d[4] == scadenza:
            #gia' inserito
            return
        
    maxIndex = doc.getItem('elenco_importi_index',0) + 1
    data.append(getImportoVolumetria(maxIndex))
    
    doc.setItem('elenco_importi_index',maxIndex)
    doc.setItem('elenco_importi_dg',data)

    
# bollo e diritti per presentazione SUE
def setImportiRilascioSUE():
    data = doc.getItem('elenco_importi_dg', []) 
    scadenza = 'Rilascio titolo'
    for d in data:
        if d[4] == scadenza:
            #gia' inserito
            return
        
    maxIndex = doc.getItem('elenco_importi_index',0) + 1
    causale = 'Bollo per rilascio titolo'
    tipoPag = 'BOLLI'
    data.append(['%02d'%maxIndex,tipoPag,causale,decimal(importo_bollo),scadenza,azione])
    
    doc.setItem('elenco_importi_index',maxIndex)
    doc.setItem('elenco_importi_dg',data)
    
    
       
if azione == 'presentazione':    
    setImportiPresentazioneSUE()

elif azione == 'alla_firma':
    setImportiRilascioSUE()
]]></resource>
  </design>
</plominodatabase>
