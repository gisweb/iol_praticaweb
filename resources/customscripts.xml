<plominodatabase id="iol_praticaweb">
  <design>
    <resource id="customscripts" title="" type="Folder">
      <resource id="Assegna" title="" type="Script (Python)"><![CDATA[## Script (Python) "Assegna"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now 
from iol.document.plomino_utils import setIolEvent,rmIolEvent

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#doc.setWfActivity(activity="Pratica assegnata a %s" %doc.getItem('istruttore_nominativo'), notifyTo=[doc.getItem('istruttore')],priority=1)
setIolEvent(doc,evento="Pratica %s assegnata a %s" %(doc.getItem('numero_pratica'),doc.getItem('istruttore_nominativo')),notifica=[doc.getItem('istruttore')])
if doc.getItem('istruttore_paesaggistica'):
    setIolEvent(doc,evento="Pratica %s assegnata a %s - Responsabile Ambientale" %(doc.getItem('numero_pratica'),doc.getItem('istruttore_paesaggistica')),notifica=[doc.getItem('istruttore_paesaggistica')])

#Ciclo sui figli per settare l'istruttore
db = context.getParentDatabase()
idx = db.getIndex()
brains=idx.dbsearch(dict(titolo_esistente_id=doc.getId()))
for i in brains:
    childDoc = i.getObject()
    childDoc.setItem('istruttore_nominativo',doc.getItem('istruttore_nominativo'))
    childDoc.setItem('istruttore',doc.getItem('istruttore'))
#    childDoc.setItem('istruttore_paesaggistica_nominativo',doc.getItem('istruttore_paesaggistica_nominativo'))
#    childDoc.setItem('istruttore_paesaggistica',doc.getItem('istruttore_paesaggistica'))
    childDoc.save(onSaveEvent=False,refresh_index=True)
#setIolEvent(doc,evento="Pratica assegnata a %s" %doc.getItem('istruttore_nominativo'))
]]></resource>
      <resource id="Assegnazione" title="" type="Script (Python)"><![CDATA[## Script (Python) "Assegnazione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from iol.document.plomino_utils import setIolEvent,rmIolEvent

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#doc.setWfActivity(activity="Pratica assegnata a %s" %doc.getItem('istruttore_nominativo'), notifyTo=[doc.getItem('istruttore')],priority=1)
setIolEvent(doc,evento="Pratica assegnata a %s" %doc.getItem('istruttore_nominativo'),notifica=[doc.getItem('istruttore')])
]]></resource>
      <resource id="AvvioProcedimento" title="" type="Script (Python)"><![CDATA[## Script (Python) "AvvioProcedimento"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate,Now,DateToString,asUnicode
from iol.document.plomino_utils import setIolEvent,rmIolEvent

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#Setto Attivita'
#doc.setWfActivity(activity="Comunicazione avvio del procedimento")
setIolEvent(doc,evento='Comunicazione Avvio Procedimento',reference='avvio_procedimento')
#Invio PEC
#context.sendMail(doc=doc,azione='avvio-procedimento')
]]></resource>
      <resource id="ImpostaTitolo" title="" type="Script (Python)"><![CDATA[## Script (Python) "ImpostaTitolo"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now 

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

db=doc.getParentDatabase()
doc.setItem('data_titolo',StringToDate(DateToString(Now())))
doc.setItem('anno_titolo',int(DateToString(Now(),format='%Y')))
doc.setItem('numero_titolo',doc.getDocNumber('numero_titolo'))
doc.getParentDatabase().getIndex().indexDocument(doc)
]]></resource>
      <resource id="InviaComunicazione" title="" type="Script (Python)"><![CDATA[## Script (Python) "InviaComunicazione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,step='',parentDoc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now 
#Schifezza da togliere
#Bisogna allineare i nomi delle mail con le azioni di WF
mapAzioni = {
    "presentazione":"presentazione",
    "avvio_procedimento":"avvio-procedimento",
    "richiesta_integrazione":'richiesta-integrazione-ok',
    "richiesta_parere":"richiesta-parere-ok",
    "procedibilita":"procedibilita",
    "rilascio_titolo":"rilascio_titolo",
    "preavviso_rigetto":"preavviso_rigetto",
    "richiesta_pagamento":"richiedi_pagamento",
    "rigetto":"rigetto",
}

if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
if not parentDoc:
    parentDoc = doc
elif  isinstance(parentDoc, basestring):
    parentDoc = context.getDocument(parentDoc)   

db=context.getParentDatabase()
#Se e' gia' stata protocollata la comunicazione skip
protocollo = doc.getItem('protocollo_%s' %step,0)
if not protocollo or protocollo==-1:    
    protocollo = context.Protocollazione(doc=doc,step=step,parentDoc=parentDoc)
    #Setto informazioni di Protocollazione
    if protocollo:
        doc.setItem('protocollo_%s' %step,protocollo)
        doc.setItem('data_protocollo_%s' %step,Now())

        
if protocollo > 0:
    
    #Recupero la configurazione del protocollo
    configProt = db.resources.config_protocollo(parentDoc)
    #context.plone_log(configProt.get('step','----'))
    #context.plone_log(configProt['step'].get(step,'----'))
    if configProt['step'].get(step,'') and configProt['step'][step].get('mail',False):
        idCom = context.sendMail(doc=doc,azione=mapAzioni[step])
        if idCom <> '-1':
            doc.setItem('data_comunicazione_%s' %step,Now())
            #logMessage = "INVIATA COMUNICAZIONE %s" %str(idCom)
            #context.plone_log(logMessage)
    return protocollo
elif protocollo == 0:
    return 0
else:
    doc.plone_utils.addPortalMessage('''Attenzione si sono riscontrati errori durante la protocollazione automatica''' ,'error')
    msg='''Errore in fase di protocollazione automatica. Il servizio di assistenza ha gia' preso in carico la segnalazione.'''
    doc.setItem('ws_response_message',"<div class='alert alert-error'><h5>%s</h5></div>" %msg)
    doc.commitTransaction()
    context.sendMail(doc=doc,azione='protocollazione-ko')
    return -1
]]></resource>
      <resource id="InviaPagamento" title="" type="Script (Python)"><![CDATA[## Script (Python) "InviaPagamento"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate,Now,DateToString
#Invio a backoffice
#lo chiamo sempre o solo per !=sue?
#DA RIVEDERE


if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
def inviaPagamento(doc): 
    bw=''
    provider = context.getProvider()

    if provider == 'praticaweb':
        bw = "@@pw-invia-pratica"
    else:
        #Non Faccio Nulla
        return True
    
    #Bw per invio a backoffice
    view = doc.restrictedTraverse(bw) 
    if view:
        try:
            ret = view.inviaComunicazioneSemplice("pagamento")
        except:
            doc.setItem('ERRORE_PAGAMENTO',1)
            ret = 1
        if ret:
            return True
        else:
            msg="Si sono verificati alcuni errori durante l'invio delle informazioni sul pagamento al servizio Edilizia Privata. Il servizio di assistenza ha gia' preso in carico la segnalazione, entro 24h l'eventuale problema verra' risolto."
            doc.setItem('ws_response_message',"<div class='alert alert-warning'><h5>%s</h5></div>" %msg)
   

inviaPagamento(doc)
]]></resource>
      <resource id="PreavvisoRigetto" title="" type="Script (Python)"><![CDATA[## Script (Python) "PreavvisoRigetto"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from iol.document.plomino_utils import setIolEvent,rmIolEvent

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#Setto Attivita'
#doc.setWfActivity(activity="Comunicazione Preavviso di Rigetto")
setIolEvent(doc,evento='Comunicazione Preavviso di Rigetto')
#Invio PEC
#context.sendMail(doc=doc,azione='preavviso-rigetto')
]]></resource>
      <resource id="Presentazione" title="" type="Script (Python)"><![CDATA[## Script (Python) "Presentazione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now 
from iol.document.plomino_utils import setIolEvent,rmIolEvent

if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    

if context.getProvider()=='sue':
    doc.setItem('Form','frm_presentata')
    if doc.getItem('iol_tipo_app','') in ['integrazione','iniziolavori','finelavori']:
        doc.setItem('IOL_PREVIOUS_FORM','bo_completa')
        #Recupero dal padre l'istruttore
        parentDoc = context.getDocument(doc.getItem('titolo_esistente_id'))
        if parentDoc:
            doc.setItem('istruttore_nominativo',parentDoc.getItem('istruttore_nominativo'))
            doc.setItem('istruttore',parentDoc.getItem('istruttore'))
            doc.setItem('istruttore_paesaggistica_nominativo',doc.getItem('istruttore_paesaggistica_nominativo'))
            doc.setItem('istruttore_paesaggistica',doc.getItem('istruttore_paesaggistica'))            
        
    else:
        doc.setItem('IOL_PREVIOUS_FORM','bo_procedimento')      
else:
    doc.setItem('Form','frm__presentata')
    
    
if doc.getItem('data_protocollo_testo'):
    return   
    
#se avevo gia fatto un invio non aggiorno la data e non invio altra email
if not doc.getItem('data_presentazione'):
    #setto gli indici per le viste  
    doc.setItem('data_presentazione',StringToDate(DateToString(Now())))
    doc.setItem('data_presentazione_testo',DateToString(Now(),format="%Y/%m/%d %H:%M"))
    context.sendMail(doc=doc,azione='presentazione-ok')

if doc.getItem('iol_tipo_app','') in ['integrazione','finelavori','iniziolavori','pagamento']:
    parentDoc = context.getDocument(doc.getItem('titolo_esistente_id',''))
    utenti_notificati = [parentDoc.getItem('istruttore')]
    if parentDoc.getItem('istruttore_paesaggistica'):
        utenti_notificati.append(parentDoc.getItem('istruttore_paesaggistica'))
        
    setIolEvent(parentDoc,evento="Presentazione %s per la pratica %s" %(doc.getItem('iol_tipo_app',''),parentDoc.getItem('numero_pratica')),notifica=utenti_notificati)
    
else:
    setIolEvent(
        doc,
        scadenza='Assegnazione e Comunicazione Responsabile Procedimento',
        dal=DateToString(Now(),format="%d/%m/%Y"),
        al=DateToString(Now()+10,format="%d/%m/%Y"),
        reference='avvio_procedimento'
    )
    
db=context.getParentDatabase()
#se c'e' protocollazione automatica protocollo
if db.resources.config().get("wsprotocollo"):
    doc.doAction('protocolla')
else:
    doc.doAction('richiedi_protocollo')
    context.sendMail(doc=doc,azione='richiedi-protocollo')
    msg="Comunicazione inviata correttamente al servizio Edilizia Privata. In attesa di essere protocollata"
    doc.setItem('ws_response_message',"<div class='alert alert-success'><h5>%s</h5></div>" %msg)
    
#se ho configurato la replica su db rilancio un save per sincronizzare i dati in postgresql
#if db.resources.config().get("pgreplica"):
doc.save(onSaveEvent=False)
]]></resource>
      <resource id="ProtocollaDocumento" title="" type="Script (Python)"><![CDATA[## Script (Python) "ProtocollaDocumento"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,docField='comunicazione_digitale'
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate,Now,DateToString

if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
## in caso di protocollazione fallita
if context.getProvider()=='sue':
    doc.setItem('Form','frm_presentata')
else:
    doc.setItem('Form','frm__presentata')
    
###invio della pratica al BO 
def inviaPratica(): 
    if doc.getItem('iol_tipo_app') in ['tipomappale']:
        return    
    bw=''
    provider = context.getProvider()

    if provider == 'praticaweb':
        bw = "@@pw-invia-pratica"
    elif provider == 'halley':
        bw = "@@hl-invia-pratica"
    else:
        #se sue setto solo i messaggi
        setResponseMessage()
        return True
    
    #Bw per invio a backoffice
    inviaBo = doc.restrictedTraverse(bw) 
    if inviaBo:
        ret = inviaBo()
        if ret:
            setResponseMessage()
            return True
        else:
            msg="Si sono verificati alcuni errori durante l'invio della comunicazione al servizio Edilizia Privata. Il servizio di assistenza ha gia' preso in carico la segnalazione, entro 24h l'eventuale problema verra' risolto."
            doc.setItem('ws_response_message',"<div class='alert alert-warning'><h5>%s</h5></div>" %msg)
   

#Clone delle pratiche figlie ed eventuale numerazione  
def setClones():
    
    if "setNumeroPratica" in context.aq_parent:
        context.aq_parent.setNumeroPratica(doc)

    if "setClonePaesaggistica" in context.aq_parent and doc.getItem('procedimento_autorizzazione_paesaggistica_opt') in ['1','2']:
        context.aq_parent.setClonePaesaggistica(doc)
    
    if "setCloneDsi" in context.aq_parent and \
        ((doc.getItem('conglomerato_opt') == '2') or \
        (doc.getItem('conglomerato_opt') == '3' and doc.getItem('denuncia_art65_opt')=='1') or \
        (doc.getItem('interventi_strutturali_opt') == '3' and doc.getItem('documentazione_dsi_opt')=='1') or \
        (doc.getItem('interventi_strutturali_opt') == '4')):
        context.aq_parent.setCloneDsi(doc)
        
    if "setCloneIdrogeologico" in context.aq_parent and doc.getItem('vincolo_idrogeologico_opt') == '3':
        context.aq_parent.setCloneIdrogeologico(doc)
    
    
def setIndiciProtocollo():  
    nProtocollo=doc.getItem('numero_protocollo')
    dProtocollo=doc.getItem('data_protocollo')
    doc.setItem('anno_protocollo',int(DateToString(dProtocollo,format='%Y')))
    doc.setItem('data_protocollo_testo',DateToString(Now(),format="%Y/%m/%d %H:%M"))
    doc.setItem('numero_protocollo_testo','Anno %s n. % 6d' %(DateToString(dProtocollo,format='%Y'),int(nProtocollo)))    
    doc.save(onSaveEvent=False)
    doc.commitTransaction()
    
def setResponseMessage():
    msg = "Comunicazione inviata correttamente al servizio Edilizia Privata, pratica numero %s" %doc.getItem('numero_pratica')
    doc.setItem('ws_response_message','<div class="alert alert-success"><h5>%s</h5></div>' %msg)

    
### Se ho gia il protocollo setto solo gli indici (caso protocollazione manuale)
if doc.getItem('numero_protocollo'):
    if not doc.getItem('numero_protocollo_testo'):
        setIndiciProtocollo() 
        context.sendMail(doc=doc,azione='protocollazione-ok')
        if inviaPratica():
            setClones()
    
# Provo a richiedere un protocollo al servizio:
else:
    viewName = context.aq_parent.config().get("wsprotocollo")
    if viewName:
        try:
            res = context.Protocollazione(doc,'presentazione',doc)
            if res > 0:
                result = {"success":1, "NumeroProtocollo": res}
            else:
                view = doc.restrictedTraverse(viewName)
                result = view.protocollaDocumento(docField=docField)
        except:
            context.sendMail(doc=doc,azione='protocollazione-ko')
            view = doc.restrictedTraverse(viewName)
            result = view.protocollaDocumento(docField=docField)
            

        
        if result['success']==1:
            doc.setItem('numero_protocollo',result['NumeroProtocollo'])
            doc.setItem('data_protocollo',StringToDate(DateToString(Now())))
            setIndiciProtocollo() 
            context.sendMail(doc=doc,azione='protocollazione-ok')
            if inviaPratica():
                setClones()
            
        else:
            #protocollazione automatica KO mando mail di controllo ad assistenza con il servizio nostro
            doc.plone_utils.addPortalMessage('''La richiesta e' stata inviata.Sono occorsi errori durante la protocollazione del documento %s''' %result['message'],'error')
            msg='''Errore in fase di protocollazione automatica. Il servizio di assistenza ha gia' preso in carico la segnalazione.'''
            doc.setItem('ws_response_message',"<div class='alert alert-error'><h5>%s</h5></div>" %msg)
            context.sendMail(doc=doc,azione='protocollazione-ko')
]]></resource>
      <resource id="Protocollazione" title="" type="Script (Python)"><![CDATA[## Script (Python) "Protocollazione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None, step='', parentDoc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now, json_loads , asList
from iol.document.plomino_utils import getMailAddress


db=context.getParentDatabase()

if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
if not parentDoc:
    parentDoc = doc
elif isinstance(parentDoc,basestring):
    parentDoc = context.getDocument(parentDoc)
    
#Protocollazione In Uscita

#Recupero la Browser View
view = doc.restrictedTraverse('protocollazione')

#Recupero la configurazione del protocollo
config = db.resources.config_protocollo(parentDoc)

# A seconda di cosa sto protocollando agisco in maniera differente
#Documenti da Protocollare
fld_docprincipale = config["step"][step]['doc_principale']
fld_allegati = config["step"][step]['altri_allegati']
#Soggetti della protocollazione
#In questo caso la comunicazione va inviata ai soli interessati della pratica
#La getElencoSoggettiPec restituisce una lista di etichette dei soggetti della pratica a cui inviare la comunicazione (es. richiedente, progettista etc.)
if step == 'presentazione':
    soggetti = ['richiedente']
else:    
    soggetti = db.resources.customscripts.getElencoSoggettiPec(parentDoc)

#Informazioni dell'Amministrazione
ente = config["ente"]

elenco_soggetti = list()
#Inizializzo l'oggetto data necessario alla protocollazione
data = dict()
data["soggetti"] = []
data["allegati"] = []
#Oggetto della Protocollazione
data["oggetto"] = config["step"][step]['oggetto']
#Amministrazione usata sia in Entrata che in Uscita
data["ente"] = ente
#Recupero i soggetti della Protocollazione

if step=='richiesta_parere':
    mailList = list()
    destinatari = asList(doc.getItem('parere_ente_opt',[]))
    e = dict()
    for d in destinatari:
        denominazione = doc.getUserGroupFullName(d)
        try:
            tmp = getMailAddress(doc,dict(),d)
            mailList+=tmp
            mail = tmp[0]
        except:
            mail = ''
        e = {
            "codfis": "",
            "nome": "",
            "cognome": denominazione,
            "denominazione": denominazione,
            "mail": mail,
            "indirizzo": "",
            "comune": "",
            "cap": "",
            "provincia": "",
        }
        data['soggetti'].append(e)
        elenco_soggetti.append(denominazione)
else:
    for k in soggetti:
        s = db.resources.customscripts.getSoggettoPec(parentDoc,k)
        data["soggetti"].append(s)
        elenco_soggetti.append("%s %s" %(s["cognome"],s["nome"]))

data['elenco_soggetti'] = ', '.join(elenco_soggetti)

#Recupero le informazioni sugli allegati da protocollare
#la getDocumenti va sostituita magari con la  getAttachmentInfo o cose simili
    
   
rr = view.getDocumenti(fld_docprincipale)
data["documento_principale"] = rr[0]
if fld_allegati:
    allegati = view.getDocumenti(fld_allegati)
    for a in allegati:
        data["allegati"].append(a)

#Se la pratica e' collegata ad un'altra inserisco i riferimenti del protocollo genitore
#Utile per raggruppare i protocolli sul sistema del protocollo
#if doc.getItem('titolo_esistente_protocollo'):
#    data["protocollo_origine"] = doc.getItem('numero_protocollo','')
#    data["anno_protocollo_origine"] = doc.getItem('anno_protocollo','')

#Protocollazione

flusso = config["step"][step]["flusso"]
#Se inserisco il terzo parametro 'testxml' non protocolla 
#testxml = 1 restituisce XML
#testxml = 2 protocolla con un random
res = view.protocolla_comunicazione(flusso,data,0)
#Recupero il risultato

res = json_loads(res)

#Se successo inserisco informazioni su Protocollo
if res["success"]==1:    
    protocollo = res["NumeroProtocollo"]
    return protocollo
else:
    return -1
]]></resource>
      <resource id="RichiestaIntegrazione" title="" type="Script (Python)"><![CDATA[## Script (Python) "RichiestaIntegrazione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now 
from iol.document.plomino_utils import setIolEvent,rmIolEvent

if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
#Setto Attivita'
#doc.setWfActivity(activity="Richiesta di Integrazioni")
setIolEvent(
    doc,
    scadenza="Integrazione dell'istanza",
    dal=DateToString(Now(),format="%d/%m/%Y"),
    al=DateToString(Now()+15,format="%d/%m/%Y"),
    reference='integrazione'
)
#Invio PEC
#context.sendMail(doc=doc,azione='richiesta-integrazione-ok')
]]></resource>
      <resource id="Rigetto" title="" type="Script (Python)"><![CDATA[## Script (Python) "Rigetto"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from iol.document.plomino_utils import setIolEvent,rmIolEvent

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#Setto Attivita'
#doc.setWfActivity(activity="Comunicazione di Rigetto")
setIolEvent(doc,evento='Comunicazione di Rigetto')
#Invio PEC
context.sendMail(doc=doc,azione='rigetto')
doc.removeItem('iol_integrabile')
#context.getIndex().indexDocument(doc)
]]></resource>
      <resource id="RilascioTitolo" title="" type="Script (Python)"><![CDATA[## Script (Python) "RilascioTitolo"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from iol.document.plomino_utils import setIolEvent

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#Setto Attivita'
#doc.setWfActivity(activity="Rilascio Titolo")
setIolEvent(doc,evento='Rilascio Titolo')
#Comunicazione Inizio Lavori
#setIolEvent(doc,evento='Rilascio Titolo')
#Invio PEC
#context.sendMail(doc=doc,azione='titolo-ok')
]]></resource>
      <resource id="SerializeTitolo" title="" type="Script (Python)"><![CDATA[## Script (Python) "SerializeTitolo"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc='00019-2020-scia'
##title=
##
from iol.document.plomino_utils import serialDoc
from Products.CMFPlomino.PlominoUtils import json_dumps

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#NB il documento viene renderizzato usando la form specificata in settings/labelcolumn
db=context.getParentDatabase()
idx = db.getIndex()
if not 'titolo_esistente_id' in idx.indexes():
    return []
#la ricerca deve restituire i documenti dei queli l'utente corrente  author
brains = idx.dbsearch(dict(titolo_esistente_id=doc.getId()),sortindex="data_protocollo",reverse=1)
results = [brain.getObject() for brain in brains]

serial=dict()
serial.update(serialDoc(doc=doc,formid="base_sub_stampa_titolo"))

## aggiungo pagopa?

##ANAGRAFICA



##TECNICI
elenco=[]
dzRuoli = dict(progettista='Progettista',direttore='Direttore Lavori',progettista_strutt='Progettista Opere Strutturali',direttore_strutt='Direttore Lavori Opere Strutturali',esecutore='Ditta Esecutrice dei Lavori',resp_sicurezza='Responsabile alla Sicurezza',collaudatore='Collaudatore',tecnico='Altro Tecnico')

keys=['progettista','direttore','progettista_strutt','direttore_strutt','esecutore','resp_sicurezza','collaudatore','tecnico']
        
#cerco prima i nominativi sui documenti figli
for key in keys:
    
    #cerco prima i nominativi sui documenti figli
    
    for childDoc in results:
        if not key in elenco and childDoc.getItem(key + '_comunicazione_opt') in ['2','3']:
            elenco.append(key)
            
            renderForm='base_sub_'+key
            serial.update(serialDoc(doc=doc,formid=renderForm))
          
    #cerco i nominativi sul documento padre
    if not key in elenco and doc.getItem(key + '_cf'):
        elenco.append(key)
        renderForm='base_sub_'+key
        serial.update(serialDoc(doc=doc,formid=renderForm))



return serial
]]></resource>
      <resource id="SetImportiPresentazione" title="" type="Script (Python)"><![CDATA[## Script (Python) "SetImportiPresentazione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
db=doc.getParentDatabase()
db.resources.config_pagopa(doc=doc,azione='presentazione')
]]></resource>
      <resource id="SetImportiRilascio" title="" type="Script (Python)"><![CDATA[## Script (Python) "SetImportiRilascio"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
db=doc.getParentDatabase()
db.resources.config_pagopa(doc=doc, azione='alla_firma')
db.resources.customscripts.sendMail(doc=doc,azione='pagamento-titolo')
]]></resource>
      <resource id="TerminaIstruttoria" title="" type="Script (Python)"><![CDATA[## Script (Python) "TerminaIstruttoria"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now 

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

    
##non lo faccio qui
'''
if not doc.getItem('numero_titolo'):  
    db=doc.getParentDatabase()
    doc.setItem('data_titolo',StringToDate(DateToString(Now())))
    doc.setItem('anno_titolo',int(DateToString(Now(),format='%Y')))
    doc.setItem('numero_titolo',doc.getDocNumber('numero_titolo'))
    doc.getParentDatabase().getIndex().indexDocument(doc)
'''
#crea il pdf del titolo e lo sostiuisce al docx
#db.resources.customscripts.stampaModulo(doc,app='sp',model='',pdf=1,field='allegato_titolo',fromfield='allegato_titolo',addform='bo_titolo')
]]></resource>
      <resource id="getDataGridAttachmentsValue" title="" type="Script (Python)"><![CDATA[## Script (Python) "getDataGridAttachmentsValue"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None, fieldName='vincoli_suolo_dg', formName='sub_asseverata_tutelafunzionale'
##title=
##
from Products.CMFPlomino.PlominoUtils import json_loads
#TODO FARE UN TIPO DI CAMPO DEDICATO DATAGRIDATTACHMENTS
#accrocco per test veloci
#if not doc:
#    doc=context.getParentDatabase().getDocument('scia-00114-2017')
    
#0 id riga
#1 id/nome del vincolo
#2 vuoto
#3 nome dell'ente
#4 modal rilascio
#5 protocollo
#6 data protocollo
                
dataR = json_loads(doc.tojson(item=fieldName,formid=formName,rendered=True))
dataV = json_loads(doc.tojson(item=fieldName,formid=formName))
data = []
for i in range(0,len(dataR)):
    dataV[i][1] = dataR[i][1] #decodifica del nome del vincolo
    row = dataV[i]
    #impostazione della label del campo
    if row[4]=='1':
        lbl = 'Autocertificazione per il vincolo %s' %row[1]
    elif row[4]=='2':
        lbl = '''Documentazione necessaria al rilascio dell'atto di assenso per il vincolo %s''' %row[1]
    elif row[4]=='3':
        lbl = 'Atto di assenso per il vincolo %s rilasciato da %s prot. %s del %s' %(row[1],row[3],row[5],row[6])
    
    data.append(dict(id=row[0],label=lbl))

return data
]]></resource>
      <resource id="getDocSettings" title="" type="Script (Python)"><![CDATA[## Script (Python) "getDocSettings"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
docId = context.aq_parent.config().get('doc_settings','0-settings')
return context.getDocument(docId)
]]></resource>
      <resource id="getDocSettingsId" title="" type="Script (Python)"><![CDATA[## Script (Python) "getDocSettingsId"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
return context.aq_parent.config().get('doc_settings','0-settings')
]]></resource>
      <resource id="getDocumentId" title="" type="Script (Python)"><![CDATA[## Script (Python) "getDocumentId"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=tipo, doc
##title=
##
# se si vuole customizzare............
from Products.CMFPlomino.PlominoUtils import Now, DateToString
return "%05d-%s-%s" %(doc.getItem("progressivo_pratica",0),DateToString(Now(),'%Y'),tipo)

# sul prodotto
#from iol.praticaweb.plomino_utils import progressivoPratica
#return progressivoPratica(prefix, doc)
]]></resource>
      <resource id="getDocumentTitle" title="" type="Script (Python)"><![CDATA[## Script (Python) "getDocumentTitle"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc
##title=
##
from Products.CMFPlomino.PlominoUtils import Now,DateToString,userFullname
db = doc.getParentDatabase()
data = DateToString(doc.getItem('data_pratica',Now()),'%d/%m/%Y')
id = "%05d-%s" %(doc.getItem("progressivo_pratica",0),DateToString(Now(),'%Y'))
title = "Istanza n. %s del %s (%s)" %(id,data,userFullname(db,db.getCurrentUser().id)) 
return title
]]></resource>
      <resource id="getElencoAllegati" title="Elenco dei campi tipo allegato" type="Script (Python)"><![CDATA[## Script (Python) "getElencoAllegati"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=Elenco dei campi tipo allegato
##
db=context.getParentDatabase()
chkList=[]
result = db.getCache('attachment_field_list')
if not result:
    result=[]
    for frm in db.getForms():
        for field in frm.getFormFields(includesubforms=False):
            if field.FieldType == 'ATTACHMENT': 
                if field.id not in chkList:
                    #firma = 'SI' if 'digitalmente' in field.getHTMLAttributesFormula() else 'NO'
                    #obbligatorio = 'SI' if field.getMandatory() else 'NO'
                    chkList.append(field.id)
                    result.append([field.title,field.id])    
    
    db.setCache('attachment_field_list', result)
return result
]]></resource>
      <resource id="getElencoAnagrafica" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoAnagrafica"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc='00019-2020-scia'
##title=
##
if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#NB il documento viene renderizzato usando la form specificata in settings/labelcolumn
db=context.getParentDatabase()
idx = db.getIndex()
if not 'titolo_esistente_id' in idx.indexes():
    return []

#la ricerca deve restituire i documenti dei quali l'utente corrente e' author
brains = idx.dbsearch(dict(titolo_esistente_id=doc.getId(),iol_tipo_app=['voltura']),sortindex="data_protocollo", reverse=1)
html=''
content=''
renderForm=db.getForm('base_sub_anagrafica')
frmFirma=db.getForm('sub_firma_digitale')
frmPec=db.getForm('sub_consenso_pec')

for brain in brains:
    childDoc=brain.getObject()
    
    sostituito = '<p><span class="label">In sostituzione di ------</span></p>'       
    content=renderForm.displayDocument(childDoc)    
    if content:
        content=content+frmFirma.displayDocument(childDoc)   
        content=content+frmPec.displayDocument(childDoc)           
        html=html+'<fieldset class="scheduler-border"><legend class="scheduler-border"><a target="_blank" href="%s">%s prot. %s del %s </a></legend>%s%s</fieldset>'%(childDoc.absolute_url(),childDoc.getItem('iol_form_title','Documento'),childDoc.getItem('numero_protocollo'),childDoc.getItem('data_protocollo_testo'),sostituito,content)  

if not html:
    content=renderForm.displayDocument(doc)
    if content:
        content=content+frmFirma.displayDocument(doc)   
        content=content+frmPec.displayDocument(doc)  
        html='<fieldset class="scheduler-border"><legend class="scheduler-border"><a href="%s/EditDocument?openwithform=base_sub_anagrafica"> Anagrafiche soggetti richiedenti <i class="icon-edit"></i></a></legend>%s</fieldset>'%(doc.absolute_url(),content) 
        
        
return html
]]></resource>
      <resource id="getElencoCivici" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoCivici"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import json_dumps
results=[]
comuneDefault = context.aq_parent.config().get('comune_default')

if doc and doc.isDocument():
    comune=doc.getItem('iol_comune',comuneDefault)
elif context.REQUEST.get('comune'):
    comune = context.REQUEST.get('comune')
else:
    comune = comuneDefault  
    
for res in context.aq_parent.zsql.ElencoCivici(idvia = context.REQUEST.get('idvia',0),cod_cat = comune).dictionaries():
    results.append(res)
     
return json_dumps({"success":1, "results":results})
]]></resource>
      <resource id="getElencoCommissioni" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoCommissioni"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=docId=''
##title=
##
from Products.CMFPlomino.PlominoUtils import DateToString
from Products.CMFCore.utils import getToolByName
db = getToolByName(context, 'iol_commissioni')
idx = db.getIndex()

brains = idx.dbsearch(dict(elenco_pratiche=docId)) 
dlgForm=db.getForm('dlg_parere_pratica')
html=''

for brain in brains:
    doc=brain.getObject()
    rows=doc.getItem('elenco_pratiche_pareri_dg')
    row=[]
    content=''
    for row in rows:
        if row[1]==context.getId():
            break
    ###vedere le vale la pena serializzare il datagrid per evitare che si rompa aggiungendo colonne           
    if len(row)>0: 
        ordine=row[0]
        parere=row[4]
        testo=row[5]
        prescrizioni=row[6]
        renderForm=db.getForm('sub_vista_commissione')
        content=content + renderForm.displayDocument(doc) 
        content=content+'''
        <p><span class="label">Parere: </span></p>
        <p><span class="TEXTFieldRead-TEXTAREA">%s</span></p>''' %parere
        content=content+'''
        <p><span class="label">Testo: </span></p>
        <p><span class="TEXTFieldRead-TEXTAREA">%s</span></p>''' %testo
        if prescrizioni:
            content=content+'''
        <p><span class="label">Prescrizioni: </span></p>
        <p><span class="TEXTFieldRead-TEXTAREA">%s</span></p>''' %prescrizioni  
    
        if content:
            html=html+'<fieldset class="scheduler-border"><legend class="scheduler-border"><a target="blank_" href="%s"> %s del %s ordine %s </a></legend>%s</fieldset>'%(doc.absolute_url(),doc.getItem('iol_form_title'),DateToString(doc.getItem('data_convocazione'),format="%d/%m/%Y"),ordine,content)

    
return html
]]></resource>
      <resource id="getElencoComuni" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoComuni"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
return context.aq_parent.config().get('elenco_comuni')
]]></resource>
      <resource id="getElencoEnti" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoEnti"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
db=context.getParentDatabase()
result = db.getCache('codici_enti_list')
if not result:
    result=['|']
    for res in context.aq_parent.zsql.ElencoEnti().dictionaries():
        result.append('%s|%s' %(res['nome'],res['id']))
    
    db.setCache('codici_enti_list', result)
 
return result
]]></resource>
      <resource id="getElencoEventi" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoEventi"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import json_dumps,DateToString

#if isinstance(doc, basestring):
#    doc = context.getDocument("04373-2019-pdc")
    
ret=[]   
for res in context.aq_parent.zsql.ElencoEventi(documento="02516-2018-scia2").dictionaries():
    ret.append(dict(evento=res["descrizione"],start=DateToString(res["data_fine"])))



return json_dumps({"success":1, "results":ret})
]]></resource>
      <resource id="getElencoFogli" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoFogli"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import json_dumps
ret=[]
comuneDefault = context.aq_parent.config().get('comune_default')
  
if doc and doc.isDocument():
    comune=doc.getItem('iol_comune',comuneDefault)
elif context.REQUEST.get('comune'):
    comune = context.REQUEST.get('comune')
else:
    comune = comuneDefault  
    
for res in context.aq_parent.zsql.ElencoFogli(sezione=context.REQUEST.get('sezione',''),cod_cat=comune).dictionaries():
    ret.append(res)
return json_dumps({"success":1, "results":ret})
]]></resource>
      <resource id="getElencoModelli" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoModelli"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=grp=''
##title=
##
portal = context.portal_url.getPortalObject()
modelli = context.aq_parent.config_printservice().get('template_folder')
app = context.getParentDatabase().getId().replace('iol_','')


folder = portal.get(modelli)
if not folder:
    return ['MANCA LA CARTELLA DEI MODELLI %s' %modelli]

folder = folder.get(app)
if not folder:
    return ['MANCA LA CARTELLA DEI MODELLI %s/%s' %(modelli,app)]

folder = folder.get(grp)
if not folder:
    return ['MANCA LA CARTELLA DEI MODELLI %s/%s/%s' %(modelli,app,grp)]
try:
    contents =  folder.listFolderContents(contentFilter={"portal_type" : "File"})
    if len(contents)==0:
        return ['LA CARTELLA DEI MODELLI %s/%s/%s NON CONTIENE FILE VALIDI' %(modelli,app,grp)]
except Exception as err:
    context.plone_utils.addPortalMessage('Elenco modelli non accessibile %s' %err,'error')
    contents = []
    
return ["%s|%s" %(modelFile.title_or_id(),modelFile.id) for modelFile in contents]
]]></resource>
      <resource id="getElencoModelliBackoffice" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoModelliBackoffice"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,azione=''
##title=
##
if isinstance(doc, basestring):
    doc = context.getDocument(doc)

if azione:
    return doc.getPrintFolderContents(grp='back-office',filter=dict(Subject=azione))
else:    
    return doc.getPrintFolderContents(grp='back-office')
]]></resource>
      <resource id="getElencoModelliEURL" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoModelliEURL"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=gruppo
##title=
##
portal = context.portal_url.getPortalObject()
filter={"portal_type" : "File"}
printForm='00-print'
modelli = portal.get('modelli').get('sue').get(gruppo)
if not modelli:
    return []

contents =  modelli.listFolderContents(contentFilter=filter)
return ["%s|%s&app=sue&grp=%s&form=%s" %(modelFile.title_or_id(),modelFile.id,gruppo,printForm) for modelFile in contents]
]]></resource>
      <resource id="getElencoPEC" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoPEC"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, json_dumps,json_loads
from iol.document.plomino_utils import GetMailJ

db=context.getParentDatabase()

if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
url = db.resources.config().get("wsMailJ")
if not url:
    return []

utente='gisweb_auth'
objid=doc.getId()+'|'+db.getId()

url = db.resources.config().get("wsMailJ")
try:
    data = json_loads(GetMailJ(url, utente, objid))
    rows = data["PecList"]
    for index in range(len(rows)):
        rows[index]["data"]=DateToString(StringToDate(rows[index]["DataOra"]),format="%d/%m/%Y Ore %H:%M")
        
    return rows
except Exception as err:
    doc.plone_utils.addPortalMessage('Errore nella generazione elenco pec %s' %err,'error')
    return [err]
]]></resource>
      <resource id="getElencoPagamentiCollegati" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoPagamentiCollegati"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=dc=None
##title=
##
#aggiungo i doc di pagamenti inviati  

if isinstance(dc, basestring):
    dc = context.getDocument(dc)
html=''
idx = context.getIndex()
brains = idx.dbsearch(dict(numero_pratica=dc.getItem('numero_pratica'),Form='frm_invio_pagamento'),sortindex="data_pratica")
for brain in brains:
    doc=brain.getObject()
    html=html+'<p><h5><a target="_blank" href="%s"> %s </a></h5></p>'%(doc.absolute_url(),doc.getId()) 
       
return html
]]></resource>
      <resource id="getElencoParticelle" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoParticelle"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import json_dumps
ret=[]
comuneDefault = context.aq_parent.config().get('comune_default')
   
if doc and doc.isDocument():
    comune=doc.getItem('iol_comune',comuneDefault)
elif context.REQUEST.get('comune'):
    comune = context.REQUEST.get('comune')
else:
    comune = comuneDefault      
    
    
for res in context.aq_parent.zsql.ElencoParticelle(sezione=context.REQUEST.get('sezione',''),foglio=context.REQUEST.get('foglio',''),cod_cat=comune).dictionaries():
    ret.append(res)
    
if 'tipomappale' in context.REQUEST.get('ACTUAL_URL'):    
    ret.append({'geom':'','id':'STRAD','ord':1,'text':'STRAD'})        
    
return json_dumps({"success":1, "results":ret})
]]></resource>
      <resource id="getElencoParticelleCU" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoParticelleCU"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import json_dumps
ret=[]
comuneDefault = context.aq_parent.config().get('comune_default')
   
if doc and doc.isDocument():
    comune=doc.getItem('iol_comune',comuneDefault)
elif context.REQUEST.get('comune'):
    comune = context.REQUEST.get('comune')
else:
    comune = comuneDefault      
    
for res in context.aq_parent.zsql.ElencoParticelleCU(sezione=context.REQUEST.get('sezione',''),foglio=context.REQUEST.get('foglio',''),cod_cat=comune).dictionaries():
    ret.append(res)
return json_dumps({"success":1, "results":ret})
]]></resource>
      <resource id="getElencoPlominoField" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoPlominoField"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
from Products.CMFCore.utils import getToolByName
catalog = getToolByName(context, 'portal_catalog')
folder_path = '/'.join(context.aq_parent.aq_parent.getPhysicalPath())
results = ["%s (%s)|%s" %(a.id,a.Title,a.id) for a in catalog(path={'query': folder_path, 'depth': 2},content_type='PlominoField',sort_on='sortable_title',)]
results = ['Seleziona un campo |'] + results
return results
]]></resource>
      <resource id="getElencoPraticheCollegate" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoPraticheCollegate"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
#NB il documento viene renderizzato usando la form specificata in settings/labelcolumn
db=context.getParentDatabase()
idx = db.getIndex()
if not 'numero_pratica' in idx.indexes():
    return ''

if isinstance(doc, basestring):
    doc = context.getDocument(doc)  
    
if not doc.isDocument():
    return
    
    
html=''
#la ricerca deve restituire i documenti dei quelli l'utente corrente  author
brains = idx.dbsearch(dict(numero_pratica=doc.getItem('numero_pratica','xxxxx')),sortindex="data_protocollo")
for brain in brains:
    if brain.id!=doc.getId():
        dc=brain.getObject()
        if doc.getItem('numero_pratica') == dc.getItem('numero_pratica'):
            html=html+'<p><h5><a target="_blank" href="%s">%s prat. %s prot. %s del %s </a></h5></p>'%(dc.absolute_url(),dc.getItem('iol_form_title','Documento'),dc.getItem('numero_pratica'),dc.getItem('numero_protocollo'),dc.getItem('data_protocollo_testo'))  
if not html:
    html = '<p><h5>Nessuna pratica collegata</h5></p>'
    
html='<fieldset class="scheduler-border"><legend class="scheduler-border"><a href="%s/EditDocument?openwithform=bo_pratiche_collegate"> Elenco delle pratiche collegate <i class="icon-edit"></i></a></legend>%s</fieldset>'%(doc.absolute_url(),html)    
    
return html
]]></resource>
      <resource id="getElencoPraticheCollegateALTRA" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoPraticheCollegateALTRA"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import DateToString
from iol.document.plomino_utils import sortList

# Elenco delle pratiche collegate:
# Di base vedo se sono valorizzati i campi titolo_esistente_...
# visualizzo la riga con i riferimenti del titolo collegato. 
# cerco sul catalogo (o sul db) i riferimenti del titolo collegato
# se il titolo collegato e un documento plomino (oppure su db) visualizzo altri dati del titolo in un fieldset
# altrimenti solo la riga con i riferimenti
# la ricerca deve essere ricorsiva in modo da recuperare tutti i titoli collegati
# restituisce un array con id del documento plomino se esiste altrimenti solo la stringa con i riferimenti della pratica
# nel template renderizzo la stringa oppure il documento con form appropriata. Esclusi inizio fine e integrazione (sca?)

if doc is None:
    doc=context.getDocument('00581-2018-scia')


idx=context.getIndex()
def trovaCollegate(mydoc):
    ret=[]
    if not mydoc.getItem('titolo_esistente_data'):
        return ret
    
    anno = DateToString(mydoc.getItem('titolo_esistente_data'),format='%Y')
    try:
        protocollo = int(mydoc.getItem('titolo_esistente_protocollo'))
    except:
        protocollo=0
    query = {'numero_protocollo':protocollo, 'anno_protocollo': int(anno)}
    
    brains = idx.dbsearch(query)
    
    if len(brains)>0:
        for brain in brains:
            if brain.iol_tipo_app not in ['iniziolavori','finelavori','integrazione']:
                obj=brain.getObject()
                ret.append([str(brain.iol_tipo_app),str(brain.numero_protocollo),DateToString(brain.data_protocollo, format='%d/%m/%Y')])
                
                ##### Attenzione deve esistere sia protocollo che data
                if obj.getItem('titolo_esistente_protocollo') and obj.getItem('titolo_esistente_data'):
                    ret=ret + trovaCollegate(obj)
                    
                if obj.getItem('elenco_titoli_edilizi'):
                    ret=ret+obj.getItem('elenco_titoli_edilizi',[])
                    #for row in rows:
                    #    ret=ret + row
                    #    context.plone_log(row)                    
     
    else:
        #ret=["%s prot. %s del %s" %(mydoc.getItem('titolo_esistente_tipo','Pratica'),
        #                  mydoc.getItem('titolo_esistente_protocollo'),
        #                  DateToString(mydoc.getItem('titolo_esistente_data'), format='%d/%m/%Y'))]
        ret.append([mydoc.getItem('titolo_esistente_tipo','Pratica'), 
             mydoc.getItem('titolo_esistente_protocollo'),                        
             DateToString(mydoc.getItem('titolo_esistente_data'), format='%d/%m/%Y')])
        
        
        
    if mydoc.getItem('elenco_titoli_edilizi'):
        ret = ret + mydoc.getItem('elenco_titoli_edilizi',[])
#        for row in rows:
#            ret=ret + row
#            context.plone_log(row)
        

    
#### TODO: rimetto in ordine e aggiungo id del documento se esiste    
    rows = []
    for row in ret:
        context.plone_log(row)
        if len(row)>2 and row[2]:
            anno = row[2].split("/")[2]
            try:
                protocollo = int(row[1])
            except:
                protocollo=0          
            query = {'numero_protocollo':protocollo, 'anno_protocollo': int(anno)}
            brains = idx.dbsearch(query)
            if len(brains)>0:
                for brain in brains:
                    row.append(brain.getObject().absolute_url())
                    row.append(''.join(row[2].split("/")[::-1]))
                    rows.append(row)
            else:
                row.append('')
                row.append(''.join(row[2].split("/")[::-1]))
                rows.append(row)

    if len(rows)>0:
        rows = sortList(rows,4)
    return rows


return trovaCollegate(doc)
]]></resource>
      <resource id="getElencoPraticheCollegateSUE" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoPraticheCollegateSUE"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=docId=''
##title=
##
#NB il documento viene renderizzato usando la form specificata in settings/labelcolumn
db=context.getParentDatabase()
idx = db.getIndex()
if not 'titolo_esistente_id' in idx.indexes():
    return []
#la ricerca deve restituire i documenti dei queli l'utente corrente  author
brains = idx.dbsearch(dict(titolo_esistente_id=docId),sortindex="data_protocollo")
html=''
for brain in brains:
    doc=brain.getObject()
    html=html+'<p><h5><a target="_blank" href="%s">%s prot. %s del %s </a></h5></p>'%(doc.absolute_url(),doc.getItem('iol_form_title','Documento'),doc.getItem('numero_protocollo'),doc.getItem('data_protocollo_testo'))  

if not html:
    html = '<p><h5>Nessuna pratica collegata</h5></p>'
    
html='<fieldset class="scheduler-border"><legend class="scheduler-border"><a href="%s/EditDocument?openwithform=bo_pratiche_collegate"> Elenco delle pratiche collegate <i class="icon-edit"></i></a></legend>%s</fieldset>'%(context.absolute_url(),html)    
    
return html
]]></resource>
      <resource id="getElencoPraticheCollegate_numeropratica" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoPraticheCollegate_numeropratica"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
#NB il documento viene renderizzato usando la form specificata in settings/labelcolumn
db=context.getParentDatabase()
idx = db.getIndex()
if not 'numero_pratica' in idx.indexes():
    return ''

if isinstance(doc, basestring):
    doc = context.getDocument(doc)  
    
html=''
#la ricerca deve restituire i documenti dei quelli l'utente corrente  author
brains = idx.dbsearch(dict(numero_pratica=doc.getItem('numero_pratica')),sortindex="data_protocollo")
for brain in brains:
    if brain.id!=doc.getId():
        dc=brain.getObject()
        html=html+'<p><h5><a target="_blank" href="%s">%s prot. %s del %s </a></h5></p>'%(dc.absolute_url(),dc.getItem('iol_form_title','Documento'),dc.getItem('numero_protocollo'),dc.getItem('data_protocollo_testo'))  

if not html:
    html = '<p><h5>Nessuna pratica collegata</h5></p>'
    
html='<fieldset class="scheduler-border"><legend class="scheduler-border"><a href="%s/EditDocument?openwithform=bo_pratiche_collegate"> Elenco delle pratiche collegate <i class="icon-edit"></i></a></legend>%s</fieldset>'%(doc.absolute_url(),html)    
    
return html
]]></resource>
      <resource id="getElencoSezioni" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoSezioni"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
result=['|']
comuneDefault = context.aq_parent.config().get('comune_default')

if doc and doc.isDocument():
    comune=doc.getItem('iol_comune',comuneDefault)
elif context.REQUEST.get('comune'):
    comune = context.REQUEST.get('comune')
else:
    comune = comuneDefault
   
for res in context.aq_parent.zsql.ElencoSezioni(cod_cat = comune).dictionaries():
    result.append('%s|%s' %(res['nome'],res['sezione']))
     
return ['|'] + result
]]></resource>
      <resource id="getElencoSoggettiPec" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoSoggettiPec"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=''
##title=
##
db = context.getParentDatabase()
if isinstance(doc,basestring):
    doc = db.getDocument(doc)

destinatari = []
if doc.getItem('progettista_pec'):
    destinatari.append("progettista")
if doc.getItem('tecnico_pec'):
    destinatari.append("tecnico")
if doc.getItem('delegato_pec'):
    destinatari.append("delegato")
if not doc.getItem('consenso_pec') or doc.getItem('iol_tipo_app') == 'aua':
    if doc.getItem('fisica_pec'):
        destinatari.append("richiedente")

return destinatari
]]></resource>
      <resource id="getElencoSubalterni" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoSubalterni"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import json_dumps
ret=[]
comuneDefault = context.aq_parent.config().get('comune_default')
   
if doc and doc.isDocument():
    comune=doc.getItem('iol_comune',comuneDefault)
elif context.REQUEST.get('comune'):
    comune = context.REQUEST.get('comune')
else:
    comune = comuneDefault      
    
    
for res in context.aq_parent.zsql.ElencoSubalterni(sezione=context.REQUEST.get('sezione',''),foglio=context.REQUEST.get('foglio',''),mappale=context.REQUEST.get('mappale',''),cod_cat=comune).dictionaries():
    ret.append(res)
return json_dumps({"success":1, "results":ret})
]]></resource>
      <resource id="getElencoTecnici" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoTecnici"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc='00019-2020-scia'
##title=
##
if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#NB il documento viene renderizzato usando la form specificata in settings/labelcolumn
db=context.getParentDatabase()
idx = db.getIndex()
if not 'titolo_esistente_id' in idx.indexes():
    return []
#la ricerca deve restituire i documenti dei queli l'utente corrente  author
brains = idx.dbsearch(dict(titolo_esistente_id=doc.getId()),sortindex="data_protocollo",reverse=1)
results = [brain.getObject() for brain in brains]

content = "" 
html=''
elenco=[]
dzRuoli = dict(progettista='Progettista',direttore='Direttore Lavori',progettista_strutt='Progettista Opere Strutturali',direttore_strutt='Direttore Lavori Opere Strutturali',esecutore='Ditta Esecutrice dei Lavori',resp_sicurezza='Responsabile alla Sicurezza',collaudatore='Collaudatore',tecnico='Altro Tecnico')

keys=['progettista','direttore','progettista_strutt','direttore_strutt','esecutore','resp_sicurezza','collaudatore','tecnico']
       
#cerco prima i nominativi sui documenti figli
for key in keys:
    
    #cerco prima i nominativi sui documenti figli
    for childDoc in results:
        if not key in elenco and childDoc.getItem(key + '_comunicazione_opt') in ['2','3']:
            elenco.append(key)
            
            ##### SETTO L'INDICE DI RICERCA QUI PER LE PROVE (DA SETTARE IN INVIO?)#########
            doc.setItem(key+'_search',childDoc.getItem(key+'_search'))
            
            renderForm=db.getForm('sub_'+key)
            sostituito=''
            if childDoc.getItem(key + '_comunicazione_opt')=='3':
                sostituito = '<p><span class="label">In sostituzione di %s</span></p>' %childDoc.getItem(key + '_sostituito')
            content=renderForm.displayDocument(childDoc)
            if key=='esecutore':
                content=content + "<h5>RICORDA DI AGGIUNGERE I RENDER DELLE ALTRE DITTE</h5>" 
            if content:
                html=html + '<fieldset class="scheduler-border"><legend class="scheduler-border"><a href="%s/EditDocument?openwithform=sub_%s"> %s -- comunicazione prot. %s del %s  <i class="icon-edit"></i></a></legend><div class="v-content well">%s%s</div></fieldset>'%(childDoc.absolute_url(),key,dzRuoli[key],childDoc.getItem('numero_protocollo'),childDoc.getItem('data_protocollo_testo'),sostituito,content)
                
    #cerco i nominativi sul documento padre
    if not key in elenco and doc.getItem(key + '_cf'):
        elenco.append(key)
        renderForm=db.getForm('sub_'+key)
        content=content + renderForm.displayDocument(doc)
        if content:
            html=html + '<fieldset class="scheduler-border"><legend class="scheduler-border"><a href="%s/EditDocument?openwithform=sub_%s"> %s  <i class="icon-edit"></i></a></legend><div class="v-content well">%s</div></fieldset>'%(doc.absolute_url(),key,dzRuoli[key],content)
    

    
 
if not html:
    html = '<p><h5>NESSUN TECNICO</h5></p>'
    
return html
]]></resource>
      <resource id="getElencoTipiPratica" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoTipiPratica"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
db=context.getParentDatabase()

result = db.getCache('form_list')
if not result:
    result = []
    for frm in context.getForms():
        ff = [fld.id for fld in frm.getFormFields()]
        if 'iol_workflow' in ff:
            v=frm.id.split('_')
            result.append("%s|%s" %(frm.Title(),v[1]))
            
    db.setCache('form_list', result)            
    
return result
]]></resource>
      <resource id="getElencoTipoDocumento" title="Elenco dei tipi documento da db praticaweb" type="Script (Python)"><![CDATA[## Script (Python) "getElencoTipoDocumento"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=Elenco dei tipi documento da db praticaweb
##
db=context.getParentDatabase()
result = db.getCache('attachment_type_list')
if not result:
    result=['|']
    for res in context.aq_parent.zsql.ElencoTipoDocumento().dictionaries():
        result.append('%s|%s' %(res['nome'],res['id']))
    
    db.setCache('attachment_type_list', result)
 
return result
]]></resource>
      <resource id="getElencoTitoli" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoTitoli"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
if context.aq_parent.config().get('elenco_titoli'):
   return context.aq_parent.config().get('elenco_titoli')
else:
   return [
        'Proprietario',
        'Locatario',
        'Conduttore',
        'Usufruttuario',
        'Comodatario',
        'Amministratore condominiale',
        "Legale rappresentante della proprieta'",
        'Tutore Legale',
        'Procuratore',
        'Curatore',
        'Erede o avente causa',
        'Amministratore di Sostegno'
    ]
]]></resource>
      <resource id="getElencoVie" title="" type="Script (Python)"><![CDATA[## Script (Python) "getElencoVie"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
result=['|']
comuneDefault = context.aq_parent.config().get('comune_default')

if doc and doc.isDocument():
    comune=doc.getItem('iol_comune',comuneDefault)
elif context.REQUEST.get('comune'):
    comune = context.REQUEST.get('comune')
else:
    comune = comuneDefault  

for res in context.aq_parent.zsql.ElencoVie(cod_cat=comune).dictionaries():
    result.append('%s|%s' %(res['nome'],res['id']))
     
return result
]]></resource>
      <resource id="getIndirizzo" title="" type="Script (Python)"><![CDATA[## Script (Python) "getIndirizzo"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
val = doc.getItem('via')   
ret = ''
frm=context.getForm('sub_ubicazione')    
fld = frm.getFormField('via')
adapt = fld.getSettings()     
ll = [f.split('|') for f in adapt.getSelectionList(doc)]
result = [x for x in ll if x[1]==val]
if len(result)>0:
    ret = result[0][0]
    if doc.getItem('civico'):
        ret = ret +', '+doc.getItem('civico')
    
return ret
]]></resource>
      <resource id="getIstanzaAllegati" title="Elenco degli allegati istanza (sue pw)" type="Script (Python)"><![CDATA[## Script (Python) "getIstanzaAllegati"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None, field='allegati_istanza',hidden=False
##title=Elenco degli allegati istanza (sue pw)
##
db=context.getParentDatabase()
elenco_campi = context.getElencoAllegati()
docId = "%s-allegati" %context.getDocSettingsId()
settings = db.getDocument(docId)

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

if context.getProvider()=='praticaweb':
    rows = settings.getItem(field)
    elenco_ok = []
    for row in rows:
        elenco_ok = elenco_ok + row[1]     
else:
    rows = settings.getItem(field+'_sue')
    elenco_ok = [l[0] for l in rows]

if not doc:
    return list()
    
attachmentsInfo = doc.getItem('iol_attachments',{})
  
result = list()
for row in elenco_campi:
    if row[1] in elenco_ok:
        fieldValue = doc.getItem(row[1],{})
        
        if fieldValue!={}:
            titolo=row[0]
            field=row[1]
            names=[]
            for name in fieldValue.keys():
                
                if hidden and name in attachmentsInfo:
                    if attachmentsInfo[name] not in ['remove','refresh']:
                        names.append(name)
                else:
                    names.append(name)
                 
            if len(names)>0:
                names.sort()
                result.append({"label":titolo,"field":field,"files":names})
                
return result
]]></resource>
      <resource id="getLayersSettings" title="" type="Script (Python)"><![CDATA[## Script (Python) "getLayersSettings"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
settings = context.aq_parent.config_map().get('layerSettings')
#override
if doc and doc.getItem('iol_comune'):
    customSettings = 'config_settings_%s' %doc.getItem('iol_comune')
    if customSettings in context.aq_parent:
        settings.update(context.aq_parent[customSettings]())
return settings
]]></resource>
      <resource id="getLinkContestuale" title="" type="Script (Python)"><![CDATA[## Script (Python) "getLinkContestuale"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
if isinstance(doc, basestring):
    doc = context.getDocument(doc)

if doc.getItem('numero_protocollo'):
    msg=""
    cls="success"
else:
    msg="Per poter inviare l'istanza occorre prima completare e inviare la seguente comunicazione:<br/>"
    cls="error"
    
return '<div class="alert alert-%s"><h5>%s<a target="blank_" href="%s">%s</a> </h5></div>' %(cls,msg,doc.absolute_url(),doc.absolute_url())
]]></resource>
      <resource id="getMailJ" title="" type="Script (Python)"><![CDATA[## Script (Python) "getMailJ"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=utente='gisweb_auth',objid=''
##title=
##
from iol.document.plomino_utils import GetMailJ
db=context.getParentDatabase()
url = db.resources.config().get("wsMailJ")
return GetMailJ(url, utente, objid)
]]></resource>
      <resource id="getMapKey" title="" type="Script (Python)"><![CDATA[## Script (Python) "getMapKey"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
return context.aq_parent.config_map().get('mapKey')
]]></resource>
      <resource id="getMapSettings" title="" type="Script (Python)"><![CDATA[## Script (Python) "getMapSettings"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import json_dumps
settings = context.aq_parent.config_map().get('mapSettings')
#override
if doc and doc.getItem('iol_comune'):
    customSettings = 'config_settings_%s' %doc.getItem('iol_comune')
    if customSettings in context.aq_parent:
        settings.update(context.aq_parent[customSettings]())
return json_dumps(settings)
]]></resource>
      <resource id="getMappingItems" title="" type="Script (Python)"><![CDATA[## Script (Python) "getMappingItems"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=test=0
##title=
##
provider = context.aq_parent.config().get('provider','praticaweb')
diz = dict()

if ("config_mapping_"+provider) in context.aq_parent.keys():
    diz = context.aq_parent["config_mapping_"+provider]()
    
if test=='1':
    from Products.CMFPlomino.PlominoUtils import json_dumps
    return json_dumps(diz)
else:
    return diz
]]></resource>
      <resource id="getPagoPaEnabled" title="Vero se abilitato il pagamento con PagoPa" type="Script (Python)"><![CDATA[## Script (Python) "getPagoPaEnabled"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=Vero se abilitato il pagamento con PagoPa
##
if isinstance(doc, basestring):
    doc = context.getDocument(doc)

# Vero se abilitato il pagamento con PagoPa
if context.getParentDatabase().resources.config().get('pagopa'):
    return doc.isDocument() and doc.getItem('pagopa_enabled')==1
else:
    return False
]]></resource>
      <resource id="getParentTecnico" title="" type="Script (Python)"><![CDATA[## Script (Python) "getParentTecnico"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
# Example code:

# Import a standard function, and get the HTML request and response objects.
from Products.PythonScripts.standard import html_quote
request = container.REQUEST
response =  request.response

# Return a string identifying this script.
print "This is the", script.meta_type, '"%s"' % script.getId(),
if script.title:
    print "(%s)" % html_quote(script.title),
print "in", container.absolute_url()
return printed
]]></resource>
      <resource id="getPianificazione" title="" type="Script (Python)"><![CDATA[## Script (Python) "getPianificazione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
# -*- coding: utf-8 -*-
from Products.CMFPlomino.PlominoUtils import json_dumps
ret = []
sezioni = context.REQUEST.get('sezioni','').split(',')
fogli = context.REQUEST.get('fogli','').split(',')
mappali = context.REQUEST.get('mappali','').split(',')
comune = context.REQUEST.get('comune','')

orFilters = []
for index in range(len(mappali)):
    andFilters = []
    andFilters.append("comune='%s'" %comune)
    andFilters.append("mappale='%s'" %mappali[index])
    andFilters.append("foglio='%s'" %fogli[index])
    if context.REQUEST.get('sezioni'):
        andFilters.append("sezione='%s'" %sezioni[index])
    andFilters = "(" + " AND ".join(andFilters) + ")"
    orFilters.append(andFilters)

sFilter = " OR ".join(orFilters)

pianificazione = 'Pianificazione_%s' %context.REQUEST.get('pianificazione','')

if pianificazione in context.aq_parent.zsql:
    for res in context.aq_parent.zsql[pianificazione](filter = sFilter).dictionaries():
        ret.append(res)
        
return json_dumps({"success":1, "filter": sFilter, "results":ret})
]]></resource>
      <resource id="getPraticheCollegate" title="" type="Script (Python)"><![CDATA[## Script (Python) "getPraticheCollegate"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import DateToString

if doc==None:
    doc=context.getDocument('00615-2017-pdc')
    
if not doc.isDocument():
    return    
if not doc.getItem('numero_pratica'):
    return

db=context.getParentDatabase()
index=db.getIndex()
query={'numero_pratica':str(doc.getItem('numero_pratica'))}

titoli = dict(iniziolavori="Inizio lavori",finelavori="Fine lavori",integrazione="Integrazione",sca="SCA")

s=''
brains = index.dbsearch(
        query,
        sortindex='data_protocollo',
        only_allowed=True)

for brain in brains:
    if brain.id != doc.getId():
        titolo = titoli.get(brain.iol_tipo_app)
        url = brain.getObject().absolute_url()
        s+= '<p><h3 class="plomino-accordion-header"><a href="%s">%s prot. %s del. %s</a></h3><div>Content</div></p>'%(url,titolo, brain.numero_protocollo, DateToString(brain.data_protocollo,format="%d/%m/%Y"))

if s:
    return '<div><h3>Pratiche collegate</h3>' + s + '</div>'
]]></resource>
      <resource id="getProvider" title="" type="Script (Python)"><![CDATA[## Script (Python) "getProvider"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
return context.aq_parent.config().get('provider','sue')
]]></resource>
      <resource id="getSezioneSettings" title="" type="Script (Python)"><![CDATA[## Script (Python) "getSezioneSettings"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
return context.aq_parent.config().get('sezione_catasto')
]]></resource>
      <resource id="getSoggettoPec" title="" type="Script (Python)"><![CDATA[## Script (Python) "getSoggettoPec"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc='',key=''
##title=
##
db = context.getParentDatabase()
if isinstance(doc,basestring):
    doc = db.getDocument(doc)

if not doc:
    return dict()

#if not "config_protocollo" in db.resources.keys():
#    return False

#config = db.resources.config_protocollo()

#momentaneo fino a che non vengono modificati i template delle browser view
soggetto = {
    "codfis": "cf",
    "nome": "nome",
    "cognome": "cognome",
    "denominazione": "",
    "mail": "pec",
    "indirizzo": "indirizzo",
    "comune": "comune",
    "cap": "cap",
    "provincia": "provincia",
}
#if key in config.keys():
#    soggetto = config.get(key)
# sostituisco ai nomi dei campi i valori
for field in soggetto:
    soggetto[field] = doc.getItem("%s_%s" %(key,soggetto[field]),'')

return soggetto
#else:
#    return dict()
]]></resource>
      <resource id="getUbicazioniIndirizzo" title="" type="Script (Python)"><![CDATA[## Script (Python) "getUbicazioniIndirizzo"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from iol.document.plomino_utils import serializeGrid
indirizzi = serializeGrid(doc,fieldName='elenco_civici',formName='sub_ubicazione')
if len(indirizzi)>0:
    return "%s, %s" %(indirizzi[0]["civico_via"],indirizzi[0]["civico_civico"])
else:
    return ""
]]></resource>
      <resource id="getUbicazioniMappali" title="" type="Script (Python)"><![CDATA[## Script (Python) "getUbicazioniMappali"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from iol.document.plomino_utils import serializeGrid
indirizzi = serializeGrid(doc,fieldName='elenco_civici',formName='sub_ubicazioni_elenco')
if len(indirizzi)>0:
    return "%s, %s" %(indirizzi[0]["civico_via"],indirizzi[0]["civico_civico"])
else:
    return ""
]]></resource>
      <resource id="getUbicazioniPosizione" title="" type="Script (Python)"><![CDATA[## Script (Python) "getUbicazioniPosizione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from iol.document.plomino_utils import serializeGrid
indirizzi = serializeGrid(doc,fieldName='elenco_civici',formName='sub_ubicazioni_elenco')
if len(indirizzi)>0:
    return indirizzi[0]["civico_geometry"]
else:
    return ""
]]></resource>
      <resource id="sendMail" title="" type="Script (Python)"><![CDATA[## Script (Python) "sendMail"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,azione='presentazione-ok',form=''
##title=
##
# metodo generico per invio email. TODO da vedere come discriminare meglio
if not doc:
    return 

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

if context.aq_parent.config().get('comune_default')=='E463':
    context.sendMailJ(doc=doc,azione=azione,form=form)
    idCom = '1'
elif context.aq_parent.config().get('mail_provider','') == 'test':
    idCom = '1'
elif context.aq_parent.config().get('mail_provider','') == 'sicraweb' and not azione in ['presentazione-ok','presentazione-ko','protocollazione-ok','protocollazione-ko']:
    #da sostituire con sendMailSicraWeb
    #form = form or 'sub_completa_' + doc.getItem('iol_tipo_app')
    idCom = context.sendMailSicraWeb(doc=doc,azione=azione)

else:
    if doc.getItem('parent_document'):
        parentDoc =  context.getDocument(doc.getItem('parent_document'))
        res = parentDoc.iolSendMail(azione=azione, parentDoc=doc)
    else:
        form = form or 'sub_completa_' + doc.getItem('iol_tipo_app')
        res = doc.iolSendMail(azione=azione, form=form)

    #Temporaneo finche non uniformiamo l'uscita della iolSendMail        
    try:
        success = str(res["success"])
    except:
        success = '-1'
        
    if success == '1':
        idCom = res['message_id']
    else:
        idCom = '-1'
    
return idCom
]]></resource>
      <resource id="sendMailJ" title="" type="Script (Python)"><![CDATA[## Script (Python) "sendMailJ"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,azione='presentazione-ok',form=''
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now, asUnicode
from iol.document.plomino_utils import SendMailJ,serialDoc,getMailAddress

disclaimer='''

====================
Questo e' un messaggio di posta elettronica generato automaticamente dal sistema.
La preghiamo di non rispondere/inviare email all'indirizzo mittente, perche' e' una casella applicativa, pertanto qualsiasi messaggio non sara' letto.

Clausola di riservatezza
Le informazioni contenute in questo messaggio di posta elettronica sono riservate e confidenziali e ne e' vietata la diffusione in qualunque modo eseguita. Qualora Lei non fosse la persona a cui il presente messaggio e' destinato, La invitiamo gentilmente ad eliminarlo dopo averne dato tempestiva comunicazione al mittente e a non utilizzare in alcun caso il suo contenuto. Qualsiasi utilizzo non autorizzato di questo messaggio e dei suoi eventuali allegati espone il responsabile alle relative conseguenze civili e penali.

Notice to recipient
This e-mail is strictly confidential and meant for only the intended recipient of the transmission. If you received this e-mail by mistake, any review, use, dissemination, distribution, or copying of this e-mail is strictly prohibited. Please notify us immediately of the error by return e-mail and please delete this message from your system. Thank you in advance for your cooperation.
====================
'''

if not doc:
    doc='04007-2019-dehor'
    doc='04008-2019-commercio'

db = context.getParentDatabase()

url = db.resources.config().get("wsMailJ")

if not url:
    return

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#configurazione messaggi da settings    
settingsId = context.getDocSettingsId()
docConfig = context.getDocSettings()

if not docConfig:
    err = "MANCA IL DOCUMENTO DI CONFIGURAZIONE %s" % settingsId
    doc.plone_utils.addPortalMessage('invio mail fallita %s' %err,'error')
    return

#serializzazione dati documento
formId = form or 'sub_completa_' + doc.getItem('iol_tipo_app')
messageConfig = docConfig.getItem("mail_settings",[])
data = serialDoc(doc,formid=formId)
if not data:
    err = "Errore nella serializzazione del documento con form: %s" %formId
    doc.plone_utils.addPortalMessage('invio mail fallita %s' %err,'error')
    return

#dati fissi
data["CURRENT_DATE"] = DateToString(Now(),format="%d/%m/%Y")
data["DOC_URL"] = doc.absolute_url()    

#id di riferimento nel db pec
docId = doc.getId()+"|"+db.getId()   


destinatari = []
if doc.getItem('progettista_pec'):
    destinatari.append(doc.getItem('progettista_pec'))
if doc.getItem('tecnico_pec'):
    destinatari.append(doc.getItem('tecnico_pec'))
if doc.getItem('delegato_pec'):
    destinatari.append(doc.getItem('delegato_pec'))    
if not doc.getItem('consenso_pec') or doc.getItem('iol_tipo_app')=='aua':
    if doc.getItem('fisica_pec'):
        destinatari.append(doc.getItem('fisica_pec'))    

    
#messaggio template da config: filtro quelli relativi all'azione
messages = filter(lambda x: x[0] == azione, messageConfig)

if len(messages)==0:
    err = "MANCA LA CONFIGURAZIONE PER L'AZIONE %s" %azione
    doc.plone_utils.addPortalMessage('invio mail fallita %s' %err,'error')
    return
    
    
###prendo solo il primo (potrei gestire piu azioni di invio email) e genero il messaggio
message = messages[0]
try:         
    oggetto = asUnicode(message[4] %data) or ""
    #patch per far funzionare template
    oggetto = "__GENERICA__"+oggetto
    testo = asUnicode(message[5] %data) or ""
    testo=testo + asUnicode(disclaimer)
    testo=testo.replace("\n","<BR />")

except Exception as err:
    doc.plone_utils.addPortalMessage('invio mail fallita, errore nel campo %s' %err,'error')
    return


for destinatario in destinatari:
    try: 
        SendMailJ(url, "FORJMAIL", docId, "1", "urbanistica.comune.laspezia@legalmail.it", destinatario, '', oggetto, testo, "") 
    except Exception as err:
        doc.plone_utils.addPortalMessage('invio mail a %s fallita: %s' %(destinatario,err),'error')
]]></resource>
      <resource id="sendMailPlone" title="" type="Script (Python)"><![CDATA[## Script (Python) "sendMailPlone"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,azione=''
##title=
##
from Products.CMFCore.utils import getToolByName
from iol.document.plomino_utils import serialDoc, getMailAddress
from Products.CMFPlomino.PlominoUtils import Now, DateToString, asUnicode

if not doc:
    doc=context.getDocument('00003-2019-commercio')

settingsId = context.getDocSettingsId()
#configurazione messaggi da settings
docConfig = context.getDocSettings()

if not docConfig:
    err = "MANCA IL DOCUMENTO DI CONFIGURAZIONE %s" % settingsId
    doc.plone_utils.addPortalMessage('invio mail fallita %s' %err,'error')
    return

formId = 'sub_completa_' + doc.getItem('iol_tipo_app')
data = serialDoc(doc,formid=formId)
if not data:
    err = "Errore nella serializzazione del documento con form: %s" %formId
    doc.plone_utils.addPortalMessage('invio mail fallita %s' %err,'error')
    return

data["CURRENT_DATE"] = DateToString(Now(),format="%d/%m/%Y")
data["DOC_URL"] = doc.absolute_url()

messageConfig = docConfig.getItem("mail_settings",[])
messages = filter(lambda x: x[0] == azione, messageConfig)

if len(messages)==0:
    err = "MANCA LA CONFIGURAZIONE PER L'AZIONE %s" %azione
    doc.plone_utils.addPortalMessage('invio mail fallita %s' %err,'error')
    return

tpl=context.mail_template
mail_host = getToolByName(context, 'MailHost')

for message in messages:
    to = ', '.join(getMailAddress(doc, data, message[1]))
    cc = ', '.join(getMailAddress(doc, data, message[2]))
    bcc = ', '.join(getMailAddress(doc, data, message[3]))

    try:         
        oggetto = message[4] %data or ""
        testo = message[5] %data or ""
        
        mail_text = tpl(to=to,
                        cc=cc,
                        bcc=bcc,
                        oggetto=asUnicode(oggetto),
                        testo=asUnicode(testo),
                        charset='utf-8',
                        request=doc.REQUEST)       

        mail_host.send(mail_text.encode('utf-8'),  immediate=True)

    except Exception as err:
        doc.plone_utils.addPortalMessage('invio mail fallita %s' %err,'error')
]]></resource>
      <resource id="sendMailSicraWeb" title="" type="Script (Python)"><![CDATA[## Script (Python) "sendMailSicraWeb"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,azione='presentazione-ok'
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now, asUnicode,asList
from gisweb.sicrawebprotocollo.plomino_utils import get_email_settings,invia_comunicazione
from iol.document.plomino_utils import getMailAddress

#Come recupero anno e protocollo?

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

parentDoc = doc.getItem('parent_document')    
    
if not parentDoc:
    parentDoc = doc
elif isinstance(parentDoc,basestring):
    parentDoc = context.getDocument(parentDoc)
    
config = context.getParentDatabase().resources.config_protocollo(parentDoc)
ente = config["ente"]

if azione == 'avvio-procedimento':
    protocollo = doc.getItem('protocollo_avvio_procedimento',0)
    anno = DateToString(doc.getItem('data_protocollo_avvio_procedimento'),'%Y')
elif azione == 'richiesta-integrazione-ok':
    protocollo = doc.getItem('protocollo_richiesta_integrazione',0)
    anno = DateToString(doc.getItem('data_protocollo_richiesta_integrazione'),'%Y')
elif azione == 'rilascio_titolo':
    protocollo = doc.getItem('protocollo_rilascio_titolo',0)
    anno = DateToString(doc.getItem('data_protocollo_rilascio_titolo'),'%Y')
elif azione == 'richiesta-parere-ok':
    protocollo = doc.getItem('protocollo_richiesta_parere',0)
    anno = DateToString(doc.getItem('data_protocollo_richiesta_parere'),'%Y')    
else:
    return -1


mail_settings = get_email_settings(parentDoc,azione)
mail_sent = list()
data = dict()
data['soggetti'] = list()

#Da rivedere
if azione == 'richiesta-parere-ok':
    mailList = doc.getItem('parere_ente_opt',[])
    mail = list()
    for m in mailList:
        mail += getMailAddress(doc,dict(),m)
else:
    mail = mail_settings["destinatarimail"].split(';')

for m in mail:
    if not m in mail_sent:
        data["soggetti"].append(dict(mail=m))
        mail_sent.append(m)
        
        
data["ente"] = ente
data["anno_protocollo"] = anno
data["numero_protocollo"] = protocollo
data["oggetto"] = mail_settings["mail_object"]
data["testo"] = ""

res = invia_comunicazione(doc,data)
pec = parentDoc.getItem('pec_inviate',[])
if res['success']==1:
    idCom = str(res['idComunicazione'])
     
else:
    idCom = '-1'
    
pec.append([idCom, protocollo, anno, data['oggetto'], mail_sent,'', ''])    
parentDoc.setItem('pec_inviate',pec)    

return idCom
]]></resource>
      <resource id="setCopiaTecnico" title="" type="Script (Python)"><![CDATA[## Script (Python) "setCopiaTecnico"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,da_tecnico='progettista',a_tecnico='direttore'
##title=
##
frm_da=context.getParentDatabase().getForm('base_sub_' + da_tecnico)
frm_a=context.getParentDatabase().getForm('base_sub_' + a_tecnico)

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

if frm_da and frm_a:
    for field in frm_da.getFormFields():
        if da_tecnico in field.id:
            copy=field.id.replace(da_tecnico,a_tecnico)
        else:
            copy=field.id
               
        doc.setItem(copy,doc.getItem(field.id))
]]></resource>
      <resource id="setImportiPagoPa" title="" type="Script (Python)"><![CDATA[## Script (Python) "setImportiPagoPa"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,importi=[],note=''
##title=
##
# aggiunge importi da pagare alla tabella degli importi
# se manca scadenza imposta data odierna
from Products.CMFPlomino.PlominoUtils import StringToDate,Now,DateToString,json_loads

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

if not doc:
    return

rows = doc.getItem('elenco_importi_dg',[])
index = doc.getItem('elenco_importi_index',0)

for row in importi:
    index=index+1
    row[0]='%02d'%index
    if not row[4]:
        row[4]=DateToString(Now(),format="%d/%m/%Y")
    rows.append(row)
doc.setItem('elenco_importi_dg',rows)
doc.setItem('elenco_importi_index',index)

#### note
if note:
    text = doc.getItem('pagopa_note')
    if text:
        text=text+'\n\n'
    doc.setItem('pagopa_note', text + note)
]]></resource>
      <resource id="setImportiPagopaPW" title="" type="Script (Python)"><![CDATA[## Script (Python) "setImportiPagopaPW"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
if isinstance(doc, basestring):
    doc = context.getDocument(doc)

importi=[]
result = context.aq_parent.zsql.ImportiPagopaPW(pratica=doc.getItem('titolo_esistente_id',0)).dictionaries()

for imp in result:
    importi.append([str(imp["contatore"]),imp["tipo"],imp["causale"],imp["importo"],imp['scadenza'],'pagamento_pw'])

doc.setItem('elenco_importi_dg',importi)


bw = "@@pw-invia-pratica"

view = doc.restrictedTraverse(bw) 
if view:
    ret = view.inviaComunicazioneSemplice(tipo="pagamento")
]]></resource>
      <resource id="setIstanzaAllegati" title="" type="Script (Python)"><![CDATA[## Script (Python) "setIstanzaAllegati"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
db=context.getParentDatabase()
idx = db.getIndex()
if not 'numero_pratica' in idx.indexes():
    return ''

if isinstance(doc, basestring):
    doc = context.getDocument(doc)  

attachments_firma={}
     
##carico l'elenco delle integrazioni
brains = idx.dbsearch(dict(numero_pratica=doc.getItem('numero_pratica'),iol_tipo_app=['integrazione','iniziolavori','finelavori','voltura']))

#aggiorno i campi attachments sui documenti figli e aggiorno i campi con le info sugli allegati da firmare nel documento padre
for brain in brains:
    child=brain.getObject()
    if child.getItem('iol_attachments_edit'):
        child.setItem('iol_attachments',child.getItem('iol_attachments_edit'))
        child.removeItem('iol_attachments_edit')
   
    #aggiorno l'elenco da firmare    
    attachments = child.getItem('iol_attachments',{})
    for f in attachments:
        if attachments[f]=='pencil':
            if not child.getId() in attachments_firma:
                attachments_firma[child.getId()]=[]
            attachments_firma[child.getId()].append(f)  
             

#aggiorno gli attachments sul documento padre (lo faccio ad ogni salvataggio non si sa mai)
if doc.getItem('iol_attachments_edit'):
    doc.setItem('iol_attachments',doc.getItem('iol_attachments_edit'))
    doc.removeItem('iol_attachments_edit')
  
#aggiorno il campo con l'elenco degli attachment validi sul documento padre (lo faccio ad ogni salvataggio non si sa mai)
attachments = doc.getItem('iol_attachments',{})
for f in attachments:
    if attachments[f]=='pencil':
        if not doc.getId() in attachments_firma:
            attachments_firma[doc.getId()]=[]
        attachments_firma[doc.getId()].append(f)                 
                
                
doc.setItem('iol_attachments_firma',attachments_firma)
]]></resource>
      <resource id="setParentInfo" title="" type="Script (Python)"><![CDATA[## Script (Python) "setParentInfo"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString

if not doc:
    doc='00019-2019-rinnovo'
    #return

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

db=context.getParentDatabase()
doc.setItem('identificativo',doc.getId())
doc.setItem('tipo_occupazione','permanente')
parentDoc = db.getDocument(doc.getItem('parent_document'))
### id autorizzazione = id autorizzazione originale propagato nei rinnovi successivi
if parentDoc:
    if doc.getItem('iol_tipo_app')=='rinnovo':
        idAutorizzazione = str(parentDoc.getItem('id_autorizzazione',parentDoc.getId()))
        #anno=str(int(DateToString(parentDoc.getItem('autorizzata_dal'),format="%Y"))+1)
        doc.setItem('id_autorizzazione', idAutorizzazione)
        anno=str(parentDoc.getItem('anno_autorizzazione')+1)
        doc.setItem('anno_autorizzazione',int(anno))
        doc.setItem('autorizzata_dal',StringToDate("01/01/"+anno, format="%d/%m/%Y"))
        doc.setItem('autorizzata_al',StringToDate("31/12/"+anno, format="%d/%m/%Y"))
    
        autDoc = db.getDocument(idAutorizzazione)
        if autDoc:
            doc.setItem('parent_tipo_app', autDoc.getItem('iol_tipo_app'))
            doc.setItem('importo_cosap',db.resources.cosap.getImportoCosap(autDoc, dal="01/01/"+anno))
            
    doc.setItem('anagrafica_search', parentDoc.getItem('anagrafica_search'))
    doc.setItem('fisica_search', parentDoc.getItem('fisica_search'))
    doc.setItem('giuridica_denominazione', parentDoc.getItem('giuridica_denominazione'))
    doc.setItem('iol_tipo_proc', parentDoc.getItem('iol_tipo_proc'))
    doc.setItem('indirizzo_search', parentDoc.getItem('indirizzo_search'))

db.getIndex().indexDocument(doc)
]]></resource>
      <resource id="stampaModulo" title="" type="Script (Python)"><![CDATA[## Script (Python) "stampaModulo"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,parent='',child='',model='',app='',grp='',pdf=0,field='',fromfield='',form='',addform='',parentform=''
##title=
##
from Products.CMFPlomino.PlominoUtils import json_loads, StringToDate

if isinstance(doc, basestring):
    doc = context.getDocument(doc)    
      
tipo_app = doc.getItem('parent_tipo_app',doc.getItem('iol_tipo_app'))
if not form and tipo_app:
    form = "sub_completa_" + tipo_app

doc.REQUEST.set('parent',parent)
doc.REQUEST.set('child',child)
doc.REQUEST.set('app',app)
doc.REQUEST.set('grp',grp)
doc.REQUEST.set('model',model)
doc.REQUEST.set('form',form)
doc.REQUEST.set('parentform',parentform)
doc.REQUEST.set('addform',addform)
doc.REQUEST.set('pdf',pdf)
doc.REQUEST.set('field',field)
doc.REQUEST.set('fromfield',fromfield)

view = doc.restrictedTraverse('@@iol-printdocument')

return view.printDocument()


if view:
    try:
        result = view.printDocument()
        result = json_loads(result)
        if result["success"]==0:
            doc.plone_utils.addPortalMessage('Errore infase di stampa %s.' %result["message"],'error')

################TODO MESSAGGI DI ERRORE ################
    except Exception, e:
        doc.plone_utils.addPortalMessage('Errore infase di stampa %s. Verificare il servizio di stampa' %e,'error')

else:
    doc.plone_utils.addPortalMessage('Servizio di stampa non configurato','error')
]]></resource>
      <resource id="trovaDocumento" title="" type="Script (Python)"><![CDATA[## Script (Python) "trovaDocumento"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=protocollo='0',anno='2000'
##title=
##
from Products.CMFPlomino.PlominoUtils import DateToString,StringToDate, json_dumps
db=context.getParentDatabase()
index=db.getIndex()

#data_protocollo=StringToDate(data,format="%d/%m/%Y")
numero_protocollo_testo='Anno %s n. % 6d' %(anno,int(protocollo))
#numero_protocollo_testo='Anno 2019 n. 746'

#query = {"numero_protocollo":nprotocollo,"data_protocollo":{"query":[datamin,datamax],"range":"min:max"}}    
query = {"numero_protocollo":int(protocollo)}                          

brains = index.dbsearch(query)
if len(brains)>0:
    return json_dumps({"success":1, "id":brains[0].id, "numero":brains[0].numero_pratica})
else:
    return json_dumps({"success":0})
]]></resource>
      <resource id="trovaTitolo" title="" type="Script (Python)"><![CDATA[## Script (Python) "trovaTitolo"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=numero='0',anno='2000'
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, json_dumps
db=context.getParentDatabase()
index=db.getIndex()

brains = index.dbsearch({"documento_esistente_titolo":int(numero),"documento_esistente_anno":int(anno)})
if len(brains)>0:
    doc=brains[0].getObject()
    if doc.getItem('data_titolo'):
        return json_dumps({"success":0,"message":"Attenzione, il titolo indicato risulta gia' rinnovato con titolo %s del %s. Non e' possibile continuare con la compilazione" %(doc.getItem('numero_titolo'),DateToString(doc.getItem('data_titolo'),format="%d/%m/%Y"))})
    else:
        return json_dumps({"success":0,"message":"Attenzione, esiste gia' una pratica di rinnovo in compilazione con identificativo %s. Continuare la compilazione o eliminarla. <a href='%s/EditDocument?openwithform=frm_rinnovo'> Clicca qui per accedere alla pratica </a>" %(doc.getId(),doc.absolute_url())})


brains = index.dbsearch({"numero_titolo":int(numero),"anno_titolo":int(anno)})
if len(brains)>0:
    doc=brains[0].getObject()
    return json_dumps({
        "success":1, 
        "message":"La pratica e' stata trovata, e' possibile continuare con la compilazione",
        "id":brains[0].id, 
        "pratica":doc.getItem('numero_pratica',brains[0].id), 
        "data":DateToString(doc.getItem('data_titolo'),format="%d/%m/%Y"),
        "anagrafica":doc.getItem('anagrafica_search')
        })
else:
    return json_dumps({"success":0,"message":"Attenzione, il titolo indicato non risulta presente in archivio oppure non si dispone dei diritti di accesso, verificare i dati inseriti. Non e' possibile continuare con la compilazione"})
]]></resource>
      <resource id="verificaElencoAllegati" title="" type="Script (Python)"><![CDATA[## Script (Python) "verificaElencoAllegati"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
db=context.getParentDatabase()
elencoCampi = db.getCache('elenco_campiXXXX') or []
if not elencoCampi:
    for frm in db.getForms():
        if '00-' not in frm.getId():
            for field in frm.getFormFields(includesubforms=False):
                if field.FieldType == 'ATTACHMENT': 
                    if field.id not in elencoCampi:
                        elencoCampi.append([frm.getId(),field.id])
    db.setCache('elenco_campi', elencoCampi)

doc = context.getDocument('0-settings-allegati')    
settings = doc.getItem('allegati_istanza',[])+doc.getItem('allegati_scia_condizionata',[])

ll=[l[1] for l in settings]
elencoSettings=[]

for l in ll:
    for x in l:
        elencoSettings.append(x)
        
#print 'in settings ma non esiste il campo'        
#print [x for x in elencoSettings if x not in elencoCampi]
#print
#print 'campi allegati non in settings'        
return '<br />'.join([x[0]+'.'+x[1] for x in elencoCampi if x[1] not in elencoSettings])          
#print elenco
#return printed
]]></resource>
      <resource id="xxxProtocollazione" title="" type="Script (Python)"><![CDATA[## Script (Python) "xxxProtocollazione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None, step='',parentDoc=''
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now, json_loads 

db=context.getParentDatabase()

if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
if not parentDoc:
    parentDoc = doc
elif isinstance(parentDoc,basestring):
    parentDoc = context.getDocument(parentDoc)
    
#Protocollazione In Uscita

#Recupero la Browser View
view = doc.restrictedTraverse('protocollazione')

#Recupero la configurazione del protocollo
config = db.resources.config_protocollo(parentDoc)

# A seconda di cosa sto protocollando agisco in maniera differente
#Documenti da Protocollare
fld_docprincipale = config["step"][step]['doc_principale']
fld_allegati = config["step"][step]['altri_allegati']
#Soggetti della protocollazione
#In questo caso la comunicazione va inviata ai soli interessati della pratica
#La getElencoSoggettiPec restituisce una lista di etichette dei soggetti della pratica a cui inviare la comunicazione (es. richiedente, progettista etc.)
if step == 'presentazione':
    soggetti = ['richiedente']
else:    
    soggetti = db.resources.customscripts.getElencoSoggettiPec(parentDoc)

#Informazioni dell'Amministrazione
ente = config["ente"]

elenco_soggetti = list()
#Inizializzo l'oggetto data necessario alla protocollazione
data = dict()
data["soggetti"] = []
data["allegati"] = []
#Oggetto della Protocollazione
data["oggetto"] = config["step"][step]['oggetto']
#Amministrazione usata sia in Entrata che in Uscita
data["ente"] = ente
#Recupero i soggetti della Protocollazione

if step=='richiesta_parere':
    mailList = list()
    destinatari = asList(doc.getItem('parere_ente_opt',[]))
    e = dict()
    for d in destinatari:
        denominazione = doc.getUserGroupFullName(d)
        try:
            tmp = getMailAddress(doc,dict(),d)
            mailList+=tmp
            mail = tmp[0]
        except:
            mail = ''
        e = {
            "codfis": "",
            "nome": "",
            "cognome": "",
            "denominazione": denominazione,
            "mail": mail,
            "indirizzo": "",
            "comune": "",
            "cap": "",
            "provincia": "",
        }
        data['soggetti'].append(e)
        elenco_soggetti.append(denominazione)
else:
    for k in soggetti:
        s = db.resources.customscripts.getSoggettoPec(parentDoc,k)
        data["soggetti"].append(s)
        elenco_soggetti.append("%s %s" %(s["cognome"],s["nome"]))

data['elenco_soggetti'] = ', '.join(elenco_soggetti)

#Recupero le informazioni sugli allegati da protocollare
#la getDocumenti va sostituita magari con la  getAttachmentInfo o cose simili
    
    
rr = view.getDocumenti(fld_docprincipale)
data["documento_principale"] = rr[0]
if fld_allegati:
    allegati = view.getDocumenti(fld_allegati)
    for a in allegati:
        data["allegati"].append(a)

        


#Se la pratica e' collegata ad un'altra inserisco i riferimenti del protocollo genitore
#Utile per raggruppare i protocolli sul sistema del protocollo
#if doc.getItem('titolo_esistente_protocollo'):
#    data["protocollo_origine"] = doc.getItem('numero_protocollo','')
#    data["anno_protocollo_origine"] = doc.getItem('anno_protocollo','')

#Protocollazione

flusso = 'U'
#Se inserisco il terzo parametro 'testxml' non protocolla 
#testxml = 1 restituisce XML
#testxml = 2 protocolla con un random
res = view.protocolla_comunicazione(flusso,data,0)
#doc.REQUEST.RESPONSE.setHeader("Content-type", "text/XML; charset=utf-8")
#print res
return res
#Recupero il risultato
res = json_loads(res)
#Se successo inserisco informazioni su Protocollo
if res["success"]==1:    
    protocollo = res["NumeroProtocollo"]
    return protocollo
else:
    return -1
]]></resource>
      <resource id="xxxtest_protocollazione_comunicazione" title="" type="Script (Python)"><![CDATA[## Script (Python) "xxxtest_protocollazione_comunicazione"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=''
##title=
##
from Products.CMFPlomino.PlominoUtils import DateToString, StringToDate, Now, json_loads
from gisweb.sicrawebprotocollo.plomino_utils import getDocumenti
db = context.getParentDatabase()
if isinstance(doc, basestring):
    doc = db.getDocument(doc)

if not doc:
    return dict(
        success=0,
        message=u'Nessuna Comunicazione da Protocollare'
    )

#Recupero la configurazione del protocollo
config = db.resources.config_protocollo()
#Documenti da Protocollare
fld_docprincipale = "comunicazione_digitale"
fld_allegati = ""
#Soggetti della protocollazione
#In questo caso la comunicazione va inviata ai soli interessati della pratica
#La getElencoSoggettiPec restituisce una lista di etichette dei soggetti della pratica a cui inviare la comunicazione (es. richiedente, progettista etc.)
soggetti = db.resources.customscripts.getElencoSoggettiPec(doc)

#Informazioni dell'Amministrazione
ente = config["ente"]

elenco_soggetti = list()
#Inizializzo l'oggetto data necessario alla protocollazione
data = dict()
data["soggetti"] = []
data["allegati"] = []
#Oggetto della Protocollazione
data["oggetto"] = "Test Protocollazione Comunicazione in uscita istanza %s" %doc.getId()
#Amministrazione usata sia in Entrata che in Uscita
data["ente"] = ente
#Recupero i soggetti della Protocollazione
for k in soggetti:
    s = db.resources.customscripts.getSoggettoPec(doc,k)
    data["soggetti"].append(s)
    elenco_soggetti.append("%s %s" %(s["cognome"],s["nome"]))

data['elenco_soggetti'] = ', '.join(elenco_soggetti)

#TEST PER VEDERE SE PROTOCOLLA SENZA CODFIS
#data["soggetti"] = [
#    dict(
#        codfis="",
#        denominazione="ENTE DI PROVA",
#        mail="carbone.marco@pec.it",
#    ),
#]
#data["elenco_soggetti"] = "ENTE DI PROVA"


#Recupero le informazioni sugli allegati da protocollare
#la getDocumenti va sostituita magari con la  getAttachmentInfo o cose simili
data["documento_principale"] = getDocumenti(doc,fld_docprincipale)[0]
if fld_allegati:
    allegati = getDocumenti(doc,fld_allegati)
    for a in allegati:
        data["allegati"].append(a)

#Se la pratica e' collegata ad un'altra inserisco i riferimenti del protocollo genitore
#Utile per raggruppare i protocolli sul sistema del protocollo
if doc.getItem('titolo_esistente_protocollo'):
    data["protocollo_origine"] = doc.getItem('titolo_esistente_protocollo','')
    data["anno_protocollo_origine"] = doc.getItem('titolo_esistente_anno','')

#Protocollazione

flusso = 'U'
#Recupero la Browser View
view = doc.restrictedTraverse('protocollazione')
#Se inserisco il terzo parametro 'testxml' non protocolla 
#testxml = 1 restituisce XML
#testxml = 2 protocolla con un random
res = view.protocolla_comunicazione(flusso,data)
#Recupero il risultato
res = json_loads(res)
#Se successo inserisco informazioni su Protocollo
if res["success"]==1:    
    protocollo = res["NumeroProtocollo"]
    anno = DateToString(Now(),'%Y')
    doc.setItem('numero_protocollo_uscita',protocollo)
    doc.setItem('data_protocollo_uscita',Now())
    doc.setItem('anno_protocollo_uscita',anno)
]]></resource>
      <resource id="sendMailTest" title="" type="Script (Python)"><![CDATA[## Script (Python) "sendMailTest"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,azione='presentazione-ok'
##title=
##
from Products.CMFPlomino.PlominoUtils import StringToDate, DateToString, Now, asUnicode
from gisweb.sicrawebprotocollo.plomino_utils import get_email_settings,invia_comunicazione

#Come recupero anno e protocollo?

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

parentDoc = doc.getItem('parent_document')    
    
if not parentDoc:
    parentDoc = doc
elif isinstance(parentDoc,basestring):
    parentDoc = context.getDocument(parentDoc)
    
config = context.getParentDatabase().resources.config_protocollo(parentDoc)
ente = config["ente"]

if azione == 'avvio-procedimento':
    protocollo = doc.getItem('protocollo_avvio_procedimento',0)
    anno = DateToString(doc.getItem('data_protocollo_avvio_procedimento'),'%Y')
elif azione == 'richiesta-integrazione-ok':
    protocollo = doc.getItem('protocollo_richiesta_integrazione',0)
    anno = DateToString(doc.getItem('data_protocollo_richiesta_integrazione'),'%Y')
elif azione == 'rilascio_titolo':
    protocollo = doc.getItem('protocollo_rilascio_titolo',0)
    anno = DateToString(doc.getItem('data_protocollo_rilascio_titolo'),'%Y')
elif azione == 'richiesta-parere-ok':
    protocollo = doc.getItem('protocollo_richiesta_parere',0)
    anno = DateToString(doc.getItem('data_protocollo_richiesta_parere'),'%Y')    
else:
    return -1


mail_settings = get_email_settings(parentDoc,azione)
mail_sent = list()
data = dict()
data['soggetti'] = list()

#Da rivedere
if azione == 'richiesta-parere-ok':
    mailList = doc.getItem('destinatario_parere',[])
    mail = list()
    for m in mailList:
        grp = context.getParentDatabase().aq_parent.acl_users.getGroupById(m)
        mail.append(grp.getProperty('email'))
else:
    mail = mail_settings["destinatarimail"].split(';')

for m in mail:
    if not m in mail_sent:
        data["soggetti"].append(dict(mail=m))
        mail_sent.append(m)
        
        
data["ente"] = ente
data["anno_protocollo"] = anno
data["numero_protocollo"] = protocollo
data["oggetto"] = mail_settings["mail_object"]
data["testo"] = ""

res = invia_comunicazione(doc,data)
pec = parentDoc.getItem('pec_inviate',[])
if res['success']==1:
    idCom = res['idComunicazione']
     
else:
    idCom = -1
    
pec.append([idCom, protocollo, anno, data['oggetto'], mail_sent,'', ''])    
parentDoc.setItem('pec_inviate',pec)    

return idCom
]]></resource>
      <resource id="sendMailPortal" title="" type="Script (Python)"><![CDATA[## Script (Python) "sendMailPortal"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None,azione=''
##title=
##
from Products.CMFCore.utils import getToolByName

mailHost = getToolByName(context, 'MailHost')


#doc=context.getDocument('')

return mailHost.port
]]></resource>
      <resource id="getAltriDestinatari" title="" type="Script (Python)"><![CDATA[## Script (Python) "getAltriDestinatari"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
if isinstance(doc, basestring):
    doc = context.getDocument(doc)
    
if not doc:
    return []
    
def riga_nominativo(titolo,tipo):
    return "%s: %s %s|%s" %(titolo,doc.getItem(tipo+'_nome'),doc.getItem(tipo+'_cognome'),doc.getItem(tipo+'_pec'))    
    
destinatari = []
if doc.getItem('progettista_pec'):
    destinatari.append(riga_nominativo("Progettista","progettista"))
if doc.getItem('progettista_stutt_pec'):
    destinatari.append(riga_nominativo("Progettista strutt.","progettista_strutt"))    
if doc.getItem('direttore_pec'):
    destinatari.append(riga_nominativo("Direttore lavori","direttore"))       
if doc.getItem('direttore_strutt_pec'):
    destinatari.append(riga_nominativo("Direttore lavori strutt","direttore_strutt")) 
if doc.getItem('fisica_pec'):
    destinatari.append(riga_nominativo("Richiedente","fisica"))
if doc.getItem('giuridica_pec'):
    destinatari.append("PEC Ditta: %s|%s" %(doc.getItem('giuridica_denominazione'),doc.getItem('giuridica_pec')))  
    
if not destinatari:
    destinatari.append('Altri destinatari non trovati|')
    
return destinatari
]]></resource>
      <resource id="Procedibilita" title="" type="Script (Python)"><![CDATA[## Script (Python) "Procedibilita"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=doc=None
##title=
##
from iol.document.plomino_utils import setIolEvent

if isinstance(doc, basestring):
    doc = context.getDocument(doc)

#Setto Attivita'
#doc.setWfActivity(activity="Rilascio Titolo")
setIolEvent(doc,evento='Procedibilita')
#Comunicazione Inizio Lavori
#setIolEvent(doc,evento='Rilascio Titolo')
#Invio PEC
#context.sendMail(doc=doc,azione='procedibilita-ok')
]]></resource>
    </resource>
  </design>
</plominodatabase>
